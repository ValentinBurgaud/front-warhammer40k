openapi: 3.0.2
info:
  version: v1
  title: Warhammer40k
  description: API de gestion des cartes magic Warhammer40k
  contact:
    name: Valentin
    email: valentin.burgaud2@gmail.com
servers:
  - url: 'https://localhost:8080'
paths:
  /v1/ping:
    get:
      operationId: ping-health
      description: Vérifie le statut du service UP/DOWN
      responses:
        '200':
          description: OK.
        '401':
          description: Authorization information is missing or invalid.
      security:
        - appId: []
          apiKey: []
      tags:
        - Health
      summary: Vérifie le statut du service
  /openapi/api.yaml:
    get:
      operationId: get-api-spec
      description: Télécharger la spec Open API
      responses:
        '200':
          description: OK.
        '401':
          description: Authorization information is missing or invalid.
      security:
        - appId: []
          apiKey: []
  /actuator/health:
    get:
      operationId: actuator-health
      description: Vérifie le statut du service UP/DOWN
      responses:
        '200':
          description: OK.
        '401':
          description: Authorization information is missing or invalid.
      security:
        - appId: []
          apiKey: []
      tags:
        - Health
      summary: Vérifie le statut du service
  /actuator/info:
    get:
      operationId: actuator-info
      description: Renseigne les logs correspondant au statut du service
      responses:
        '200':
          description: OK.
        '401':
          description: Authorization information is missing or invalid.
      security:
        - appId: []
          apiKey: []
      tags:
        - Info
      summary: Afficher les logs
  /api/v1/cards:
    get:
      tags:
        - cards
      description: Liste les cartes via l'api Magic
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/staticlists.Enum'
        '401':
          description: Authorization information is missing or invalid.
      summary: Lister les canaux de diffusions
  /api/v1/static-lists/status:
    get:
      security:
        - apiKey: []
          appId: []
      tags:
        - Listes statiques
      description: Liste les valeurs de l'enum status
      operationId: status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/staticlists.Enum'
        '401':
          description: Authorization information is missing or invalid.
      summary: Lister les status d'une pièce
  '/api/v1/contracts/{contractId}/documents/{documentId}':
    parameters:
      - schema:
          type: string
        name: contractId
        in: path
        required: true
      - schema:
          type: string
        name: documentId
        in: path
        required: true
    get:
      summary: Consulter ou télécharger un document contrat
      tags:
        - Contracts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documentContract'
            application/octet-stream:
              schema:
                type: string
                description: Le fichier
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Contract or document with the specified ids were not found.
      operationId: get-policies-idPolicy-documents-documentId
      description: Retourne les données du document ou télécharge le document. La distinction du résultat se fait sur le header Accept.
      x-code-samples:
        - lang: cURL
          source: |
            curl --request GET \
            --url https://dev.api.altima-assurances.fr/documents/api/v1/contracts/your-contractId/documents/your-documentId \
            --header 'accept: application/json' \
            --header 'x-auth-app-id: your-app-id' \
            --header 'x-auth-key: your-api-key'
        - lang: NodeJs
          source: |
            var request = require("request");
            console.log('getting meta');
            var options = {
              method: 'GET',
              url: 'https://dev.api.altima-assurances.fr/documents/api/v1/contracts/your-contractId/documents/your-documentId',
              headers: {
                accept: 'application/json',
                'x-auth-app-id': 'your-app-id',
                'x-auth-key': 'your-api-key'
                }
            };
            request(options, function (error, response, body) {
              if (error) throw new Error(error);
                console.log(body);
              });
        - lang: Java
          source: |
            // blocking download file
            OkHttpClient client = new OkHttpClient();
            Request request = new Request.Builder()
            .url("https://dev.api.altima-assurances.fr/documents/api/v1/contracts/your-contractId/documents/your-documentId")
            .get()
            .addHeader("accept", "application/octet-stream")
            .addHeader("x-auth-app-id", "your-app-id")
            .addHeader("x-auth-key", "your-api-key")
            .build();
            Response response = client.newCall(request).execute();
      parameters:
        - schema:
            type: string
            enum:
              - application/json
              - application/octet-stream
          in: header
          name: Accept
          description: application/json ou rien pour les metadata sinon application/octet-stream pour télécharger le fichier
      security:
        - appId: []
          apiKey: []
    delete:
      summary: Supprimer un document contrat
      tags:
        - Contracts
      operationId: delete-policies-idPolicy-documents-documentId
      responses:
        '204':
          description: No Content
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Contract with the specified id was not found.
      description: Supprime un document contrat
      security:
        - appId: []
          apiKey: []
    patch:
      summary: Modifier un document contract
      operationId: patch-api-v1-contractsId-documents-documentId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  downloadUri:
                    type: string
                    description: Uri relative à api document pour télécharger le document
                  url:
                    type: string
                    description: Url Alfresco pour visualiser le document
                  id:
                    type: string
                required:
                  - downloadUri
                  - url
                  - id
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Contract or document with the specified ids were not found.
      description: 'Modifie les métadonnées d''un document contrat et/ou transfère ce document vers un client, un autre devis, un contrat ou un avenant'
      tags:
        - Contracts
      security:
        - appId: []
          apiKey: []
      parameters:
        - schema:
            type: string
          in: header
          name: Content-Type
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                op:
                  $ref: '#/components/schemas/op'
                value:
                  $ref: '#/components/schemas/valuePatch'
              required:
                - op
                - value
  '/api/v1/proposals/{proposalId-proposalVersion}/documents/{documentId}':
    parameters:
      - schema:
          type: string
        name: proposalId-proposalVersion
        in: path
        required: true
      - schema:
          type: string
        name: documentId
        in: path
        required: true
    get:
      summary: Consulter ou télécharger un document devis
      tags:
        - Proposals
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documentProposal'
            application/octet-stream:
              schema:
                type: string
                description: Le fichier
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Proposal or document with the specified ids were not found.
      operationId: get-proposals-proposalId-documents-documentId
      description: Retourne les données du document ou télécharge le document. La distinction du résultat se fait sur le header Accept.
      x-code-samples:
        - lang: cURL
          source: |
            curl --request GET \
            --url https://dev.api.altima-assurances.fr/documents/api/proposals/proposalId-proposalVersion/documents/your-documentId \
            --header 'accept: application/json' \
            --header 'x-auth-app-id: your-app-id' \
            --header 'x-auth-key: your-api-key'
        - lang: NodeJs
          source: |
            var request = require("request");
            console.log('getting meta');
            var options = {
              method: 'GET',
              url: 'https://dev.api.altima-assurances.fr/documents/api/proposals/proposalId-proposalVersion/documents/your-documentId',
              headers: {
                accept: 'application/json',
                'x-auth-app-id': 'your-app-id',
                'x-auth-key': 'your-api-key'
                }
            };
            request(options, function (error, response, body) {
              if (error) throw new Error(error);
                console.log(body);
              });
        - lang: Java
          source: |
            // blocking download file
            OkHttpClient client = new OkHttpClient();
            Request request = new Request.Builder()
            .url("https://dev.api.altima-assurances.fr/documents/api/proposals/proposalId-proposalVersion/documents/your-documentId")
            .get()
            .addHeader("accept", "application/octet-stream")
            .addHeader("x-auth-app-id", "your-app-id")
            .addHeader("x-auth-key", "your-api-key")
            .build();
            Response response = client.newCall(request).execute();
      parameters:
        - schema:
            type: string
            enum:
              - application/json
              - application/octet-stream
          in: header
          name: Accept
          description: application/json ou rien pour les metadata sinon application/octet-stream pour télécharger le fichier
      security:
        - appId: []
          apiKey: []
    delete:
      summary: Supprimer un document devis
      tags:
        - Proposals
      operationId: delete-proposals-proposalId-documents-documentId
      responses:
        '204':
          description: OK
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Proposal with the specified id was not found.
      description: Supprime un document devis
      security:
        - appId: []
          apiKey: []
      parameters: []
    patch:
      summary: Modifier un document devis
      operationId: patch-api-v1-proposals-proposalId-proposalVersion-documents-documentId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  downloadUri:
                    type: string
                    description: Uri relative à api document pour télécharger le document
                  url:
                    type: string
                    description: Url Alfresco pour visualiser le document
                  id:
                    type: string
                required:
                  - downloadUri
                  - url
                  - id
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Proposal or document with the specified ids were not found.
      description: 'Modifie les métadonnées d''un document devis et/ou transfère ce document vers un client, un autre devis, un contrat ou un avenant'
      tags:
        - Proposals
      security:
        - appId: []
          apiKey: []
      parameters:
        - schema:
            type: string
          in: header
          name: Content-Type
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                op:
                  $ref: '#/components/schemas/op'
                value:
                  $ref: '#/components/schemas/valuePatch'
              required:
                - op
                - value
  '/api/v1/clients/{clientId}/documents/{documentId}':
    parameters:
      - schema:
          type: string
        name: documentId
        in: path
        required: true
      - schema:
          type: string
        name: clientId
        in: path
        required: true
        description: L'id technique de la personne
    get:
      summary: Consulter ou télécharger un document client
      tags:
        - Clients
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documentClient'
            application/octet-stream:
              schema:
                type: string
                description: Le fichier
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Client or document with the specified ids were not found.
      operationId: get-client-idClient-documents-idDocument
      description: Retourne les données du document ou télécharge le document. La distinction du résultat se fait sur le header Accept.
      x-code-samples:
        - lang: cURL
          source: |
            curl --request GET \
            --url https://dev.api.altima-assurances.fr/documents/api/v1/clients/your-clientId/documents/your-documentId \
            --header 'accept: application/json' \
            --header 'x-auth-app-id: your-app-id' \
            --header 'x-auth-key: your-api-key'
        - lang: NodeJs
          source: |
            var request = require("request");
            console.log('getting meta');
            var options = {
              method: 'GET',
              url: 'https://dev.api.altima-assurances.fr/documents/api/v1/clients/your-clientId/documents/your-documentId',
              headers: {
                accept: 'application/json',
                'x-auth-app-id': 'your-app-id',
                'x-auth-key': 'your-api-key'
                }
            };
            request(options, function (error, response, body) {
              if (error) throw new Error(error);
                console.log(body);
              });
        - lang: Java
          source: |
            // blocking download file
            OkHttpClient client = new OkHttpClient();
            Request request = new Request.Builder()
            .url("https://dev.api.altima-assurances.fr/clients/api/v1/clients/your-clientId/documents/your-documentId")
            .get()
            .addHeader("accept", "application/octet-stream")
            .addHeader("x-auth-app-id", "your-app-id")
            .addHeader("x-auth-key", "your-api-key")
            .build();
            Response response = client.newCall(request).execute();
      parameters:
        - schema:
            type: string
            enum:
              - application/json
              - application/octet-stream
          in: header
          name: Accept
          description: application/json ou rien pour les metadata sinon application/octet-stream pour télécharger le fichier
      security:
        - appId: []
          apiKey: []
    delete:
      summary: Supprimer un document client
      tags:
        - Clients
      operationId: delete-client-idClient-documents-idDocument
      responses:
        '204':
          description: No Content
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Client with the specified id was not found.
      description: Supprime un document  client
      security:
        - appId: []
          apiKey: []
    patch:
      summary: Modifier un document client
      tags:
        - Clients
      operationId: patch-api-v1-clients-clientId-documents-documentId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  downloadUri:
                    type: string
                    description: Uri relative à api document pour télécharger le document
                  url:
                    type: string
                    description: Url Alfresco pour visualiser le document
                  id:
                    type: string
                required:
                  - downloadUri
                  - url
                  - id
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Client or document with the specified ids were not found.
      description: 'Modifie les métadonnées d''un document client et/ou transfère ce document vers un autre client, un devis, un contrat ou un avenant'
      security:
        - appId: []
          apiKey: []
      parameters:
        - schema:
            type: string
          in: header
          name: Content-Type
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                op:
                  $ref: '#/components/schemas/op'
                value:
                  $ref: '#/components/schemas/valuePatch'
              required:
                - op
                - value
  '/api/v2/clients/{clientId}/documents':
    parameters:
      - schema:
          type: string
        name: clientId
        in: path
        required: true
        description: L'id technique de la personne
    get:
      summary: Rechercher les documents d'un client V2
      tags:
        - Clients
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/document'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Client with the specified id was not found.
      operationId: get-documents-idClient-V2
      description: Recherche les documents de type client à partir du numéro de client
      security:
        - appId: []
          apiKey: []
      parameters:
        - schema:
            type: string
          in: query
          name: evidenceIds
          description: Tableau de String contenant les différents id à rechercher
        - schema:
            type: string
          in: query
          name: evidenceStatus
          description: Liste des status des documents séparé par une virgule
        - schema:
            type: string
          in: query
          name: received
          description: Retourne seulement la liste des documents reçu
  '/api/v1/clients/{clientId}/documents':
    parameters:
      - schema:
          type: string
        name: clientId
        in: path
        required: true
        description: L'id technique de la personne
    get:
      summary: Rechercher les documents d'un client
      tags:
        - Clients
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/document'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Client with the specified id was not found.
      operationId: get-documents-idClient
      description: Recherche les documents de type client à partir du numéro de client
      security:
        - appId: []
          apiKey: []
      parameters:
        - schema:
            type: string
          in: query
          name: evidenceIds
          description: Tableau de String contenant les différents id à rechercher
    post:
      summary: Classer un document client
      tags:
        - Clients
      operationId: post-documents-idClient
      x-code-samples:
        - lang: cURL
          source: |
            curl --request POST \
            --url https://dev.api.altima-assurances.fr/documents/api/v1
            clients/your-person-id/documents \
            --header 'content-type: multipart/form-data' \
            --header 'x-auth-app-id: your-app-id' \
            --header 'x-auth-key: your-api-key' \
            --form 'metadata={"metadata": {"broadcastChannels": ["courrier"],"type": "AR_CPC","origin": "PP", "evidenceStatus": "CLASSE"}}' \
            --form 'file=@/PATH_TO_YOUR_FILE'
        - lang: NodeJs
          source: |
            var request = require('request');
            var fs = require('fs');
            var options = {
              'method': 'POST',
              'url': 'https://dev.api.altima-assurances.fr/documents/api/v1/clients/your-person-id/documents',
              'headers': {
                'Content-Type': 'multipart/form-data',
                'X-Auth-App-Id': 'your-app-id',
                'X-Auth-Key': 'your-api-key'
                },
                formData: {
                  'metadata': '{"broadcastChannels": ["courrier"], "origin":"PP", "type":"AR_CPC", "evidenceStatus": "CLASSE"}',
                  'file': {
                    'value': fs.createReadStream('PATH_TO_YOUR_FILE'),
                    'options': {
                      'filename': 'fileName',
                      'contentType': 'your file content-Type'
                    }
                  }
                }
            };
            request(options, function (error, response) {
                if (error) throw new Error(error);
                  console.log(response.body);
            });
        - lang: Java
          source: |
            OkHttpClient client = new OkHttpClient().newBuilder().build();
            MediaType mediaType = MediaType.parse("multipart/form-data");
            RequestBody body = new MultipartBody.Builder().setType(MultipartBody.FORM)
              .addFormDataPart("metadata", "{\"broadcastChannels\":[\"courrier\"],\"origin\":\"PP\", \"type\":\"AR_CPC\"}")
              .addFormDataPart("file","fileName", RequestBody.create(MediaType.parse("your file content-type"),new File("PATH_TO_YOUR_FILE"))).build();
            Request request = new Request.Builder()
              .url("https://dev.api.altima-assurances.fr/documents/api/v1/clients/your-person-id/documents")
              .method("POST", body)
              .addHeader("Content-Type", "multipart/form-data")
              .addHeader("X-Auth-App-Id", "your-app-id")
              .addHeader("X-Auth-Key", "your-api-key")
              .build();
            Response response = client.newCall(request).execute();
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  url:
                    type: string
                    description: Url Alfresco pour visualiser le document
                  downloadUri:
                    type: string
                    description: Uri relative à api document pour télécharger le document
                required:
                  - id
                  - url
                  - downloadUri
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Client with the specified id was not found.
        '409':
          description: File already exists.
        '413':
          description: File too big.
        '415':
          description: File type is not accepted.
        '422':
          description: Unable to read file.
      description: Upload un document client avec ses metadonnées
      parameters:
        - schema:
            type: string
            enum:
              - multipart/form-data
          in: header
          name: Content-Type
          required: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/client'
      security:
        - appId: []
          apiKey: []
  '/api/v2/contracts/{contractId}/documents':
    parameters:
      - schema:
          type: string
        name: contractId
        in: path
        required: true
    get:
      summary: Rechercher les documents lié à un contrat V2
      tags:
        - Contracts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/document'
                        - $ref: '#/components/schemas/GroupedDocuments'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Contract with the specified ID was not found.
      operationId: get-documents-idPolicy-V2
      description: 'Recherche les documents de type contrat à partir du numéro de contrat, mais aussi les documents du devis rattaché au contrat, ainsi que tous les documents des projets d''avenant du contrat (souscrit, refusé, sans suite)'
      security:
        - appId: []
          apiKey: []
      parameters:
        - schema:
            type: boolean
          in: query
          name: groupByEntityId
          description: 'Groupe les documents par entityId, a false si absent'
        - schema:
            type: string
          in: query
          name: evidenceIds
          description: Tableau de String contenant les différents id à rechercher
        - schema:
            type: string
          in: query
          name: evidenceStatus
          description: Liste des status des documents séparé par une virgule
        - schema:
            type: string
          in: query
          name: received
          description: Retourne seulement la liste des documents reçu
  '/api/v1/contracts/{contractId}/documents':
    parameters:
      - schema:
          type: string
        name: contractId
        in: path
        required: true
    get:
      summary: Rechercher les documents lié à un contrat
      tags:
        - Contracts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/document'
                    - $ref: '#/components/schemas/GroupedDocuments'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Contract with the specified ID was not found.
      operationId: get-documents-idPolicy
      description: 'Recherche les documents de type contrat à partir du numéro de contrat, mais aussi les documents du devis rattaché au contrat, ainsi que tous les documents des projets d''avenant du contrat (souscrit, refusé, sans suite)'
      security:
        - appId: []
          apiKey: []
      parameters:
        - schema:
            type: boolean
          in: query
          name: groupByEntityId
          description: 'Groupe les documents par entityId, a false si absent'
        - schema:
            type: string
          in: query
          name: evidenceIds
          description: Tableau de String contenant les différents id à rechercher
    post:
      summary: Classer un document contrat
      tags:
        - Contracts
      operationId: post-documents-idPolicy
      description: |
        Upload un document contrat et contrat flotte sans vehiculeId

        Privilégier, si c'est possible, le format multipart/form-data plus performant et adapter a l'envoie de fichier
      x-code-samples:
        - lang: cURL
          source: |
            curl --request POST \
            --url https://dev.api.altima-assurances.fr/documents/api/v1/contracts/your-contract-id/documents \
            --header 'content-type: multipart/form-data' \
            --header 'x-auth-app-id: your-app-id' \
            --header 'x-auth-key: your-api-key' \
            --form 'metadata={"metadata": {"broadcastChannels": ["courrier"],"type": "AR_CPC","origin": "PP"}}' \
            --form 'file=@/PATH_TO_YOUR_FILE'
        - lang: NodeJs
          source: |
            var request = require('request');
            var fs = require('fs');
            var options = {
              'method': 'POST',
              'url': 'https://dev.api.altima-assurances.fr/documents/api/v1/contracts/your-contract-id/documents',
              'headers': {
                'Content-Type': 'multipart/form-data',
                'X-Auth-App-Id': 'your-app-id',
                'X-Auth-Key': 'your-api-key'
                },
                formData: {
                  'metadata': '{"broadcastChannels":["courrier"], "origin":"PP", "type":"AR_CPC"}',
                  'file': {
                    'value': fs.createReadStream('PATH_TO_YOUR_FILE'),
                    'options': {
                      'filename': 'fileName',
                      'contentType': 'your file content-Type'
                    }
                  }
                }
            };
            request(options, function (error, response) {
                if (error) throw new Error(error);
                  console.log(response.body);
            });
        - lang: Java
          source: |
            OkHttpClient client = new OkHttpClient().newBuilder().build();
            MediaType mediaType = MediaType.parse("multipart/form-data");
            RequestBody body = new MultipartBody.Builder().setType(MultipartBody.FORM)
              .addFormDataPart("metadata", "{\"broadcastChannels\":[\"courrier\"],\"origin\":\"PP\", \"type\":\"AR_CPC\"}")
              .addFormDataPart("file","fileName", RequestBody.create(MediaType.parse("your file content-type"),new File("PATH_TO_YOUR_FILE"))).build();
            Request request = new Request.Builder()
              .url("https://dev.api.altima-assurances.fr/documents/api/v1/contracts/your-contract-id/documents")
              .method("POST", body)
              .addHeader("Content-Type", "multipart/form-data")
              .addHeader("X-Auth-App-Id", "your-app-id")
              .addHeader("X-Auth-Key", "your-api-key")
              .build();
            Response response = client.newCall(request).execute();
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  url:
                    type: string
                    description: Url Alfresco pour visualiser le document
                  downloadUri:
                    type: string
                    description: Uri relative à api document pour télécharger le document
                required:
                  - id
                  - url
                  - downloadUri
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Contract with the specified id was not found.
        '409':
          description: File already exists or disk full.
        '413':
          description: File too big.
        '415':
          description: File type is not accepted.
        '422':
          description: Unable to read file.
      security:
        - appId: []
          apiKey: []
      parameters:
        - schema:
            type: string
            enum:
              - multipart/form-data
          in: header
          name: Content-Type
          required: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/contract'
          application/json:
            schema:
              $ref: '#/components/schemas/contractBase64'
        description: ''
  '/api/v2/proposals/{proposalId-proposalVersion}/documents':
    parameters:
      - schema:
          type: string
        name: proposalId-proposalVersion
        in: path
        required: true
    get:
      summary: Rechercher les documents d'un devis V2
      tags:
        - Proposals
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/document'
                        - $ref: '#/components/schemas/GroupedDocuments'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Proposal with the specified ID was not found.
      operationId: get-documents-idProposal-V2
      description: Recherche les documents de type devis à partir du numéro de devis et de sa version
      security:
        - appId: []
          apiKey: []
      parameters:
        - schema:
            type: boolean
          in: query
          name: groupByEntityId
          description: 'Groupe les documents par entityId, a false si absent'
        - schema:
            type: string
          in: query
          name: evidenceIds
          description: Tableau de String contenant les différents id à rechercher
        - schema:
            type: string
          in: query
          name: evidenceStatus
          description: Liste des status des documents séparé par une virgule
        - schema:
            type: string
          in: query
          name: received
          description: Retourne seulement la liste des documents reçu
  '/api/v1/proposals/{proposalId-proposalVersion}/documents':
    parameters:
      - schema:
          type: string
        name: proposalId-proposalVersion
        in: path
        required: true
    get:
      summary: Rechercher les documents d'un devis
      tags:
        - Proposals
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/document'
                    - $ref: '#/components/schemas/GroupedDocuments'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Proposal with the specified ID was not found.
      operationId: get-documents-idProposal
      description: Recherche les documents de type devis à partir du numéro de devis et de sa version
      security:
        - appId: []
          apiKey: []
      parameters:
        - schema:
            type: boolean
          in: query
          name: groupByEntityId
          description: 'Groupe les documents par entityId, a false si absent'
        - schema:
            type: string
          in: query
          name: evidenceIds
          description: Tableau de String contenant les différents id à rechercher
    post:
      summary: Classer un document devis
      tags:
        - Proposals
      operationId: post-documents-idProposal
      description: |
        Upload un document devis

        Privilégier, si c'est possible, le format multipart/form-data plus performant et adapter a l'envoie de fichier
      x-code-samples:
        - lang: cURL
          source: |
            curl --request POST \
            --url https://dev.api.altima-assurances.fr/documents/api/v1/proposals/proposalId-proposalVersion/documents \
            --header 'content-type: multipart/form-data' \
            --header 'x-auth-app-id: your-app-id' \
            --header 'x-auth-key: your-api-key' \
            --form 'metadata={"metadata": {"broadcastChannels": ["courrier"],"type": "AR_CPC","origin": "PP",  "evidenceStatus": "CLASSE"}}' \
            --form 'file=@/PATH_TO_YOUR_FILE'
        - lang: NodeJs
          source: |
            var request = require('request');
            var fs = require('fs');
            var options = {
              'method': 'POST',
              'url': 'https://dev.api.altima-assurances.fr/documents/api/v1/proposals/proposalId-versionId/documents',
              'headers': {
                'Content-Type': 'multipart/form-data',
                'X-Auth-App-Id': 'your-app-id',
                'X-Auth-Key': 'your-api-key'
                },
                formData: {
                  'metadata': '{"broadcastChannels":["courrier"], "origin":"PP", "type":"AR_CPC", "evidenceStatus": "CLASSE"}',
                  'file': {
                    'value': fs.createReadStream('PATH_TO_YOUR_FILE'),
                    'options': {
                      'filename': 'fileName',
                      'contentType': 'your file content-Type'
                    }
                  }
                }
            };
            request(options, function (error, response) {
                if (error) throw new Error(error);
                  console.log(response.body);
            });
        - lang: Java
          source: |
            OkHttpClient client = new OkHttpClient().newBuilder().build();
            MediaType mediaType = MediaType.parse("multipart/form-data");
            RequestBody body = new MultipartBody.Builder().setType(MultipartBody.FORM)
              .addFormDataPart("metadata", "{\"broadcastChannels\":\"["courrier"]\",\"origin\":\"PP\", \"type\":\"AR_CPC\"}")
              .addFormDataPart("file","fileName", RequestBody.create(MediaType.parse("your file content-type"),new File("PATH_TO_YOUR_FILE"))).build();
            Request request = new Request.Builder()
              .url("https://dev.api.altima-assurances.fr/documents/api/v1/proposals/proposalId-versionId/documents")
              .method("POST", body)
              .addHeader("Content-Type", "multipart/form-data")
              .addHeader("X-Auth-App-Id", "your-app-id")
              .addHeader("X-Auth-Key", "your-api-key")
              .build();
            Response response = client.newCall(request).execute();
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  url:
                    type: string
                    description: Url Alfresco pour visualiser le document
                  downloadUri:
                    type: string
                    description: Uri relative à api document pour télécharger le document
                required:
                  - id
                  - url
                  - downloadUri
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Proposal with the specified id was not found.
        '409':
          description: File already exists or disk full.
        '413':
          description: File too big.
        '415':
          description: File type is not accepted.
        '422':
          description: Unable to read file.
      parameters:
        - schema:
            type: string
            enum:
              - multipart/form-data
          in: header
          name: Content-Type
          required: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/proposal'
          application/json:
            schema:
              $ref: '#/components/schemas/contractBase64'
      security:
        - appId: []
          apiKey: []
  '/api/v2/endorsements/{endorsementId-endorsementVersion}/documents':
    parameters:
      - schema:
          type: string
        name: endorsementId-endorsementVersion
        in: path
        required: true
    get:
      summary: Rechercher les documents d'un avenant V2
      operationId: get-api-v1-endorsement-endorsementId-versions-versionId-documents-V2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/document'
                        - $ref: '#/components/schemas/GroupedDocuments'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Endorsement with the specified ID was not found.
      description: Recherche les documents de type avenant à partir du numéro de l'avenant et de sa version
      security:
        - appId: []
          apiKey: []
      tags:
        - Endorsements
      parameters:
        - schema:
            type: boolean
          in: query
          name: groupByEntityId
          description: 'Groupe les documents par entityId, a false si absent'
        - schema:
            type: string
          in: query
          name: evidenceIds
          description: Tableau de String contenant les différents id à rechercher
        - schema:
            type: string
          in: query
          name: evidenceStatus
          description: Liste des status des documents séparé par une virgule
        - schema:
            type: string
          in: query
          name: received
          description: Retourne seulement la liste des documents reçu
  '/api/v1/endorsements/{endorsementId-endorsementVersion}/documents':
    parameters:
      - schema:
          type: string
        name: endorsementId-endorsementVersion
        in: path
        required: true
    post:
      summary: Classer un document avenant
      operationId: post-api-v1-endorsement-endorsementId-documents
      x-code-samples:
        - lang: cURL
          source: |
            curl --request POST \
            --url https://dev.api.altima-assurances.fr/documents/api/v1/endorsements/your-endorsementId-your-versionId/documents \
            --header 'content-type: multipart/form-data' \
            --header 'x-auth-app-id: your-app-id' \
            --header 'x-auth-key: your-api-key' \
            --form 'metadata={"metadata": {"broadcastChannels": ["courrier"],"type": "AR_CPC","origin": "PP", "evidenceStatus": "CLASSE"}}' \
            --form 'file=@/PATH_TO_YOUR_FILE'
        - lang: NodeJs
          source: |
            var request = require('request');
            var fs = require('fs');
            var options = {
              'method': 'POST',
              'url': 'https://dev.api.altima-assurances.fr/documents/api/v1/endorsements/your-endorsementId-your-versionId/documents',
              'headers': {
                'Content-Type': 'multipart/form-data',
                'X-Auth-App-Id': 'your-app-id',
                'X-Auth-Key': 'your-api-key'
                },
                formData: {
                  'metadata': '{"broadcastChannels":["courrier"], "origin":"PP", "type":"AR_CPC", "evidenceStatus": "CLASSE"}',
                  'file': {
                    'value': fs.createReadStream('PATH_TO_YOUR_FILE'),
                    'options': {
                      'filename': 'fileName',
                      'contentType': 'your file content-Type'
                    }
                  }
                }
            };
            request(options, function (error, response) {
                if (error) throw new Error(error);
                  console.log(response.body);
            });
        - lang: Java
          source: |
            OkHttpClient client = new OkHttpClient().newBuilder().build();
            MediaType mediaType = MediaType.parse("multipart/form-data");
            RequestBody body = new MultipartBody.Builder().setType(MultipartBody.FORM)
              .addFormDataPart("metadata", "{\"broadcastChannels\":[\"courrier\"],\"origin\":\"PP\", \"type\":\"AR_CPC\"}")
              .addFormDataPart("file","fileName", RequestBody.create(MediaType.parse("your file content-type"),new File("PATH_TO_YOUR_FILE"))).build();
            Request request = new Request.Builder()
              .url("https://dev.api.altima-assurances.fr/documents/api/v1/endorsements/your-endorsementId-your-versionId/documents")
              .method("POST", body)
              .addHeader("Content-Type", "multipart/form-data")
              .addHeader("X-Auth-App-Id", "your-app-id")
              .addHeader("X-Auth-Key", "your-api-key")
              .build();
            Response response = client.newCall(request).execute();
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  url:
                    type: string
                    description: Url Alfresco pour visualiser le document
                  downloadUri:
                    type: string
                    description: Uri relative à api document pour télécharger le document
                required:
                  - id
                  - url
                  - downloadUri
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Avenant with the specified id was not found.
        '409':
          description: File already exists or disk full.
        '413':
          description: File too big.
        '415':
          description: File type is not accepted.
        '422':
          description: Unable to read file.
      description: |
        Upload un document avenant

        Privilégier, si c'est possible, le format multipart/form-data plus performant et adapter a l'envoie de fichier
      security:
        - appId: []
          apiKey: []
      parameters:
        - schema:
            type: string
            enum:
              - multipart/form-data
          in: header
          name: Content-Type
          required: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/avenant'
          application/json:
            schema:
              $ref: '#/components/schemas/contractBase64'
      tags:
        - Endorsements
    get:
      summary: Rechercher les documents d'un avenant
      operationId: get-api-v1-endorsement-endorsementId-versions-versionId-documents
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/document'
                    - $ref: '#/components/schemas/GroupedDocuments'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Endorsement with the specified ID was not found.
      description: Recherche les documents de type avenant à partir du numéro de l'avenant et de sa version
      security:
        - appId: []
          apiKey: []
      tags:
        - Endorsements
      parameters:
        - schema:
            type: boolean
          in: query
          name: groupByEntityId
          description: 'Groupe les documents par entityId, a false si absent'
        - schema:
            type: string
          in: query
          name: evidenceIds
          description: Tableau de String contenant les différents id à rechercher
  '/api/v1/endorsements/{endorsementId-endorsementVersion}/documents/{documentId}':
    parameters:
      - schema:
          type: string
        name: documentId
        in: path
        required: true
      - schema:
          type: string
        name: endorsementId-endorsementVersion
        in: path
        required: true
    get:
      summary: Consulter ou télécharger un document avenant
      tags:
        - Endorsements
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documentAvenant'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Endorsement or document with the specified ids were not found.
      operationId: get-api-v1-endorsement-endorsementId-versions-versionId-documents-documentId
      description: Retourne les données du document ou télécharge le document. La distinction du résultat se fait sur le header Accept.
      security:
        - appId: []
          apiKey: []
      parameters:
        - schema:
            type: string
          in: header
          name: Accept
          description: application/json ou rien pour les metadata sinon application/octet-stream pour télécharger le fichier
    delete:
      summary: Supprimer un document avenant
      operationId: delete-api-v1-endorsements-endorsementId-endorsementversion-documents-documentId
      responses:
        '204':
          description: No Content
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Endorsement with the specified id or version was not found
      description: Supprime un document avenant
      security:
        - appId: []
          apiKey: []
      tags:
        - Endorsements
    patch:
      summary: Modifier un document avenant
      operationId: patch-api-v1-endorsements-endorsementId-endorsementVersion-documents-documentId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  downloadUri:
                    type: string
                    description: Uri relative à api document pour télécharger le document
                  url:
                    type: string
                    description: Url Alfresco pour visualiser le document
                  id:
                    type: string
                required:
                  - downloadUri
                  - url
                  - id
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Endorsement or document with the specified ids were not found.
      description: 'Modifie les métadonnées d''un document avenant et/ou transfère ce document vers un client, un devis, un contrat ou un autre avenant'
      security:
        - appId: []
          apiKey: []
      parameters:
        - schema:
            type: string
          in: header
          name: Content-Type
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                op:
                  $ref: '#/components/schemas/op'
                value:
                  $ref: '#/components/schemas/valuePatch'
              required:
                - op
                - value
      tags:
        - Endorsements
  '/api/v2/contracts/{contractId}/vehicles/{vehicleId}/documents':
    parameters:
      - schema:
          type: string
        name: contractId
        in: path
        required: true
      - schema:
          type: string
        name: vehicleId
        in: path
        required: true
    get:
      summary: Rechercher les documents d'un vehicule flotte V2
      operationId: get-api-v1-contracts-contractId-vehicles-vehicleId-documents-V2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      - $ref: '#/components/schemas/document'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Contract with the specified ID was not found.
      description: Rechercher les documents d'un vehicule flotte à partir d'un numéro de contrat et une véhicule
      security:
        - appId: []
          apiKey: []
      tags:
        - Contracts
  '/api/v1/contracts/{contractId}/vehicles/{vehicleId}/documents':
    parameters:
      - schema:
          type: string
        name: contractId
        in: path
        required: true
      - schema:
          type: string
        name: vehicleId
        in: path
        required: true
    post:
      summary: Classer un document d'un véhicule flotte
      operationId: post-api-v1-contracts-contractId-vehicles-vehicleId-documents
      x-code-samples:
        - lang: cURL
          source: |-
            curl --location --request POST 'https://dev.api.altima-assurances.fr/documents/api/v1/contracts/your-contract-id/vehicles/your-vehicle-id/documents' \n--header 'Content-Type: application/json' \n--header 'X-Auth-App-Id: your-app-id' \n--header 'X-Auth-Key: your-api-key' \n--form 'file=@/PATH_TO_YOUR_FILE' \n--form 'metadata={
              "contractId": "FLC000000020",
              "type":"LOA",
              "broadcastChannels":["INTERNET"],
              "origin":"INT"
            }'
        - lang: NodeJs
          source: |-
            var request = require('request');
            var fs = require('fs');
            var options = {
              'method': 'POST',
              'url': 'https://dev.api.altima-assurances.fr/documents/api/v1/contracts/your-contract-id/vehicles/your-vehicle-id/documents',
              'headers': {
                'Content-Type': 'application/json',
                'X-Auth-App-Id': your-app-id
                'X-Auth-Key': 'your-api-key'
              },
              formData: {
                'file': {
                  'value': fs.createReadStream('PATH_TO_YOUR_FILE'),
                  'options': {
                    'filename': 'fileName',
                    'contentType': null
                  }
                },
                'metadata': '{
              "contractId": "FLC000000020",
              "type":"LOA",
              "broadcastChannels":["INTERNET"],
              "origin":"INT"
            }'
              }
            };
            request(options, function (error, response) {
              if (error) throw new Error(error);
              console.log(response.body);
            });
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient().newBuilder()
              .build();
            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = new MultipartBody.Builder().setType(MultipartBody.FORM)
              .addFormDataPart("file","fileName",
                RequestBody.create(MediaType.parse("application/octet-stream"),
                new File("fileName")))
              .addFormDataPart("metadata", "{
              "contractId": "FLC000000020",
              "type":"LOA",
              "broadcastChannels":["INTERNET"],
              "origin":"INT"
            }")
              .build();
            Request request = new Request.Builder()
              .url("https://dev.api.altima-assurances.fr/documents/api/v1/contracts/your-contract-id/vehicles/your-vehicle-id/documents")
              .method("POST", body)
              .addHeader("Content-Type", "application/json")
              .addHeader("X-Auth-App-Id", "your-app-id")
              .addHeader("X-Auth-Key", "your-api-key")
              .build();
            Response response = client.newCall(request).execute();
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  url:
                    type: string
                    description: Url Alfresco pour visualiser le document
                  downloadUri:
                    type: string
                    description: Uri relative à api document pour télécharger le document
                required:
                  - id
                  - url
                  - downloadUri
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Contract with the specified ID was not found.
        '409':
          description: File already exists or disk full.
        '413':
          description: File too big.
        '415':
          description: File type is not accepted.
        '422':
          description: Unable to read file.
      description: |
        Upload un document contrat flotte avec vehiculeId

        Privilégier, si c'est possible, le format multipart/form-data plus performant et adapter a l'envoie de fichier
      security:
        - appId: []
          apiKey: []
      tags:
        - Contracts
      parameters:
        - schema:
            type: string
            enum:
              - multipart/form-data
          in: header
          name: Content-Type
          description: ''
          required: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/contract'
          application/json:
            schema:
              $ref: '#/components/schemas/contractBase64'
        description: ''
      deprecated: true
    get:
      summary: Rechercher les documents d'un vehicule flotte
      operationId: get-api-v1-contracts-contractId-vehicles-vehicleId-documents
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Contract with the specified ID was not found.
      description: Rechercher les documents d'un vehicule flotte à partir d'un numéro de contrat et une véhicule
      security:
        - appId: []
          apiKey: []
      tags:
        - Contracts
  '/api/v1/contracts/{contractId}/vehicles/{vehicleId}/documents/{documentId}':
    parameters:
      - schema:
          type: string
        name: contractId
        in: path
        required: true
      - schema:
          type: string
        name: vehicleId
        in: path
        required: true
      - schema:
          type: string
        name: documentId
        in: path
        required: true
    get:
      summary: Consulter ou télécharger un document d'un véhicule flotte
      tags:
        - Contracts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documentContract'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Contract or document with the specified ids were not found.
      operationId: get-api-v1-contracts-contractId-vehicles-vehicleId-documents-documentId
      description: Retourne les données du document ou télécharge le document. La distinction du résultat se fait sur le header Accept.
      security:
        - appId: []
          apiKey: []
      parameters:
        - schema:
            type: string
          in: header
          name: Accept
          description: application/json ou rien pour les metadata sinon application/octet-stream pour télécharger le fichier
    delete:
      summary: Supprimer un document contrat d'un véhicule flotte
      operationId: delete-api-v1-contracts-contractId-vehicles-vehicleId-documents-documentId
      responses:
        '204':
          description: No Content
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: 'Contract, document or vehicule with the specified ids were not found'
      description: Supprime un document contrat
      security:
        - appId: []
          apiKey: []
      tags:
        - Contracts
  '/api/v2/contracts/{contractId}/entities/{entityId}/documents':
    parameters:
      - schema:
          type: string
        name: contractId
        in: path
        required: true
      - schema:
          type: string
        name: entityId
        in: path
        required: true
    get:
      summary: Rechercher les documents d’une entité d’un contrat flotte V2
      tags:
        - Fleets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documentFlotte'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Contract or entity with the specified ID was not found.
      operationId: get-api-v1-contracts-contractId-entities-entityId-documents-V2
      description: Rechercher les documents contrats flotte d'une entité à partir d'un numéro de contrat et un numéro d'entité
      security:
        - appId: []
          apiKey: []
  '/api/v1/contracts/{contractId}/entities/{entityId}/documents':
    parameters:
      - schema:
          type: string
        name: contractId
        in: path
        required: true
      - schema:
          type: string
        name: entityId
        in: path
        required: true
    get:
      summary: Rechercher les documents d’une entité d’un contrat flotte
      tags:
        - Fleets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documentFlotte'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Contract or entity with the specified ID was not found.
      operationId: get-api-v1-contracts-contractId-entities-entityId-documents
      description: Rechercher les documents contrats flotte d'une entité à partir d'un numéro de contrat et un numéro d'entité
      security:
        - appId: []
          apiKey: []
      parameters: []
    post:
      summary: Classer un document contrat pour une entité flotte
      operationId: post-api-v1-contracts-contractId-entities-entityId-documents
      responses:
        '200':
          description: Created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  url:
                    type: string
                    description: Url Alfresco pour visualiser le document
                  downloadUri:
                    type: string
                    description: Uri relative à api document pour télécharger le document
                required:
                  - url
                  - downloadUri
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: contract or entity with the specified id was not found.
        '409':
          description: File already exists or disk full.
        '413':
          description: File too big.
        '415':
          description: File type is not accepted.
        '422':
          description: Unable to read file.
      description: |
        Upload un document contrat flotte pour une entité

        Privilégier, si c'est possible, le format multipart/form-data plus performant et adapter a l'envoie de fichier
      security:
        - appId: []
          apiKey: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/flotte'
          application/json:
            schema:
              $ref: '#/components/schemas/flotteBase64'
      parameters:
        - schema:
            type: string
          in: header
          required: true
          name: Content-Type
      tags:
        - Fleets
  '/api/v1/contracts/{contractId}/entities/{entityId}/documents/{documentId}':
    parameters:
      - schema:
          type: string
        name: contractId
        in: path
        required: true
      - schema:
          type: string
        name: entityId
        in: path
        required: true
      - schema:
          type: string
        name: documentId
        in: path
        required: true
    get:
      summary: Consulter ou télécharger un document d’une entité d’un contrat flotte
      tags:
        - Fleets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documentFlotte'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Contract or entity with the specified ID was not found.
      operationId: get-api-v1-contracts-contractId-entities-entityId-documents-documentId
      description: Retourne les données du document ou télécharge le document. La distinction du résultat se fait sur le header Accept.
      security:
        - appId: []
          apiKey: []
      parameters:
        - schema:
            type: string
          in: header
          name: Accept
          description: application/json ou rien pour les metadata sinon application/octet-stream pour télécharger le fichier
  '/api/v2/contracts/{contractId}/entities/{entityId}/vehicles/{vehicleId}/documents':
    parameters:
      - schema:
          type: string
        name: contractId
        in: path
        required: true
      - schema:
          type: string
        name: entityId
        in: path
        required: true
      - schema:
          type: string
        name: vehicleId
        in: path
        required: true
    get:
      summary: Rechercher les documents d’un véhicule entité d’un contrat flotte V2
      tags:
        - Fleets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/documentFlotte'
        '401':
          description: Unauthorized
        '404':
          description: Contract or entity with the specified ID was not found.
      operationId: get-api-v1-contracts-contractId-entities-entityId-vehicles-vehicleId-documents-V2
      description: Rechercher les documents contrats flotte d'un véhicule d'une entité
      security:
        - appId: []
          apiKey: []
  '/api/v1/contracts/{contractId}/entities/{entityId}/vehicles/{vehicleId}/documents':
    parameters:
      - schema:
          type: string
        name: contractId
        in: path
        required: true
      - schema:
          type: string
        name: entityId
        in: path
        required: true
      - schema:
          type: string
        name: vehicleId
        in: path
        required: true
    get:
      summary: Rechercher les documents d’un véhicule entité d’un contrat flotte
      tags:
        - Fleets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/documentFlotte'
        '401':
          description: Unauthorized
        '404':
          description: Contract or entity with the specified ID was not found.
      operationId: get-api-v1-contracts-contractId-entities-entityId-vehicles-vehicleId-documents
      description: Rechercher les documents contrats flotte d'un véhicule d'une entité
      security:
        - appId: []
          apiKey: []
    post:
      summary: Classer un document pour un véhicule pour une entité d’un contrat flotte
      operationId: post-api-v1-contracts-contractId-entities-entityId-vehicles-vehicleId-documents
      responses:
        '200':
          description: Created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  url:
                    type: string
                    description: Url Alfresco pour visualiser le document
                  downloadUri:
                    type: string
                    description: Uri relative à api document pour télécharger le document
                required:
                  - url
                  - downloadUri
        '400':
          description: Bad Request.
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: contract or entity with the specified id was not found.
        '409':
          description: File already exists or disk full.
        '413':
          description: File too big.
        '415':
          description: File type is not accepted.
        '422':
          description: Unable to read file.
      tags:
        - Fleets
      description: |
        Upload un document contrat flotte pour un véhicule d''une entité

        Privilégier, si c'est possible, le format multipart/form-data plus performant et adapter a l'envoie de fichier
      security:
        - appId: []
          apiKey: []
      parameters:
        - schema:
            type: string
          in: header
          name: Content-Type
          required: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/flotte'
          application/json:
            schema:
              $ref: '#/components/schemas/flotteBase64'
        description: ''
  '/api/v1/contracts/{contractId}/entities/{entityId}/vehicles/{vehiclesId}/documents/{documentId}':
    parameters:
      - schema:
          type: string
        name: contractId
        in: path
        required: true
      - schema:
          type: string
        name: entityId
        in: path
        required: true
      - schema:
          type: string
        name: vehiclesId
        in: path
        required: true
      - schema:
          type: string
        name: documentId
        in: path
        required: true
    get:
      summary: Consulter ou télécharger un document d’un véhicule d’une entité d’un contrat flotte
      tags:
        - Fleets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documentFlotte'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Contract or entity with the specified ID was not found.
      operationId: get-api-v1-contracts-contractId-entities-entityId-vehicles-vehiclesId-documents-documentId
      description: Retourne les données du document ou télécharge le document. La distinction du résultat se fait sur le header Accept.
      security:
        - appId: []
          apiKey: []
      parameters:
        - schema:
            type: string
          in: header
          name: Accept
          description: application/json ou rien pour les metadata sinon application/octet-stream pour télécharger le fichier
  '/api/v1/claims/{claimId}/uts/{claimId-claimUtId}/documents/{documentId}':
    parameters:
      - schema:
          type: string
        name: claimId-claimUtId
        in: path
        required: true
      - schema:
          type: string
        name: documentId
        in: path
        required: true
      - schema:
          type: string
        name: claimId
        in: path
        required: true
    get:
      summary: Consulter ou télécharger un document d'une unité de traitement de sinistre
      tags:
        - Claims
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documentSinistre'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: 'Claim, claimUt or document with the specified ids were not found.'
      operationId: get-api-v1-claims-declarationId-uts-claimId-claimUtId-documents-documentId
      description: Retourne les données du document ou télécharge le document. La distinction du résultat se fait sur le header Accept.
      security:
        - appId: []
          apiKey: []
      parameters:
        - schema:
            type: string
          in: header
          description: application/json ou rien pour les metadata sinon application/octet-stream pour télécharger le fichier
          name: Accept
    patch:
      summary: Modifier un document d'une unité de traitement de sinistre
      operationId: patch-api-v1-claims-declarationId-uts-claimId-claimUtId-documents-documentId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  downloadUri:
                    type: string
                    description: Uri relative à api document pour télécharger le document
                  url:
                    type: string
                    description: Url Alfresco pour visualiser le document
                  id:
                    type: string
                required:
                  - downloadUri
                  - url
                  - id
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: 'Claim, claimUt or document with the specified ids were not found.'
      description: 'Modifie les métadonnées d''un document d''une unité de traitement de sinistre et/ou transfère ce document vers un client, un devis, un contrat, un avenant ou une autre unité de traitement de sinistre'
      security:
        - appId: []
          apiKey: []
      parameters:
        - schema:
            type: string
          in: header
          name: Content-Type
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                op:
                  $ref: '#/components/schemas/op'
                value:
                  $ref: '#/components/schemas/valuePatch'
      tags:
        - Claims
    delete:
      summary: Supprimer un document d'une unité de traitement de sinistre
      operationId: delete-api-v1-claims-declarationId-uts-claimId-claimUtId-documents-documentId
      responses:
        '204':
          description: No Content
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: 'Claim, claimUt or document with the specified ids were not found.'
      description: Supprime un document d'une unité de traitement de sinistre
      security:
        - appId: []
          apiKey: []
      tags:
        - Claims
  '/api/v2/claims/{claimId}/uts/{claimId-claimUtId}/documents':
    parameters:
      - schema:
          type: string
        name: claimId-claimUtId
        in: path
        required: true
      - schema:
          type: string
        name: claimId
        in: path
        required: true
    get:
      summary: Rechercher les documents d'une unité de traitement de sinistre V2
      operationId: get-api-v1-claims-declarationId-uts-claimId-claimUtId-documents-V2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/document'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: 'Claim, claimUt or document with the specified ids were not found.'
      tags:
        - Claims
      description: Rechercher les documents d'une unité de traitement de sinistre
      security:
        - appId: []
          apiKey: []
  '/api/v1/claims/{claimId}/uts/{claimId-claimUtId}/documents':
    parameters:
      - schema:
          type: string
        name: claimId-claimUtId
        in: path
        required: true
      - schema:
          type: string
        name: claimId
        in: path
        required: true
    post:
      summary: Classer un document pour une unité de traitement de sinistre
      operationId: post-api-v1-claims-declarationId-uts-claimId-claimUtId-documents
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  url:
                    type: string
                    description: Url Alfresco pour visualiser le document
                  downloadUri:
                    type: string
                    description: Uri relative à api document pour télécharger le document
                required:
                  - id
                  - url
                  - downloadUri
        '400':
          description: Bad Request
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: 'Claim, claimUt or document with the specified ids were not found.'
        '409':
          description: File already exists or disk full.
        '413':
          description: File too big.
        '415':
          description: File type is not accepted.
        '422':
          description: Unable to read file.
      tags:
        - Claims
      description: |
        Upload un document d'une unité de traitement de sinistre

        Privilégier, si c'est possible, le format multipart/form-data plus performant et adapter a l'envoie de fichier
      security:
        - appId: []
          apiKey: []
      parameters:
        - schema:
            type: string
          in: header
          name: Content-Type
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/sinistre'
          application/json:
            schema:
              $ref: '#/components/schemas/sinistreBase64'
    get:
      summary: Rechercher les documents d'une unité de traitement de sinistre
      operationId: get-api-v1-claims-declarationId-uts-claimId-claimUtId-documents
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/document'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: 'Claim, claimUt or document with the specified ids were not found.'
      tags:
        - Claims
      description: Rechercher les documents d'une unité de traitement de sinistre
      security:
        - appId: []
          apiKey: []
  '/api/v2/uts/{claimId-claimUtId}/documents/{documentId}':
    parameters:
      - schema:
          type: string
        name: claimId-claimUtId
        in: path
        required: true
      - schema:
          type: string
        name: documentId
        in: path
        required: true
    get:
      summary: Consulter ou télécharger un document d'une unité de traitement de sinistre
      tags:
        - UT
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documentSinistre'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: 'Claim, claimUt or document with the specified ids were not found.'
      operationId: get-api-v1-uts-claimId-claimUtId-documents-documentId
      description: Retourne les données du document ou télécharge le document. La distinction du résultat se fait sur le header Accept.
      security:
        - appId: []
          apiKey: []
      parameters:
        - schema:
            type: string
          in: header
          description: application/json ou rien pour les metadata sinon application/octet-stream pour télécharger le fichier
          name: Accept
    patch:
      summary: Modifier un document d'une unité de traitement de sinistre
      operationId: patch-api-v1-uts-claimId-claimUtId-documents-documentId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  downloadUri:
                    type: string
                    description: Uri relative à api document pour télécharger le document
                  url:
                    type: string
                    description: Url Alfresco pour visualiser le document
                  id:
                    type: string
                required:
                  - downloadUri
                  - url
                  - id
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: 'Claim, claimUt or document with the specified ids were not found.'
      description: 'Modifie les métadonnées d''un document d''une unité de traitement de sinistre et/ou transfère ce document vers un client, un devis, un contrat, un avenant ou une autre unité de traitement de sinistre'
      security:
        - appId: []
          apiKey: []
      parameters:
        - schema:
            type: string
          in: header
          name: Content-Type
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                op:
                  $ref: '#/components/schemas/op'
                value:
                  $ref: '#/components/schemas/valuePatch'
      tags:
        - UT
    delete:
      summary: Supprimer un document d'une unité de traitement de sinistre
      operationId: delete-api-v1-uts-claimId-claimUtId-documents-documentId
      responses:
        '204':
          description: No Content
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: 'Claim, claimUt or document with the specified ids were not found.'
      description: Supprime un document d'une unité de traitement de sinistre
      security:
        - appId: []
          apiKey: []
      tags:
        - UT
  '/api/v2/uts/{claimId-claimUtId}/documents':
    parameters:
      - schema:
          type: string
        name: claimId-claimUtId
        in: path
        required: true
    get:
      summary: Rechercher les documents d'une unité de traitement de sinistre V2
      operationId: get-api-v1-uts-claimId-claimUtId-documents-V2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/document'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: 'Claim, claimUt or document with the specified ids were not found.'
      tags:
        - UT
      description: Rechercher les documents d'une unité de traitement de sinistre
      security:
        - appId: []
          apiKey: []
    post:
      summary: Classer un document pour une unité de traitement de sinistre
      operationId: post-api-v2-uts-claimId-claimUtId-documents
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  url:
                    type: string
                    description: Url Alfresco pour visualiser le document
                  downloadUri:
                    type: string
                    description: Uri relative à api document pour télécharger le document
                required:
                  - id
                  - url
                  - downloadUri
        '400':
          description: Bad Request
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: 'Claim, claimUt or document with the specified ids were not found.'
        '409':
          description: File already exists or disk full.
        '413':
          description: File too big.
        '415':
          description: File type is not accepted.
        '422':
          description: Unable to read file.
      tags:
        - UT
      description: |
        Upload un document d'une unité de traitement de sinistre

        Privilégier, si c'est possible, le format multipart/form-data plus performant et adapter a l'envoie de fichier
      security:
        - appId: []
          apiKey: []
      parameters:
        - schema:
            type: string
          in: header
          name: Content-Type
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/sinistre'
          application/json:
            schema:
              $ref: '#/components/schemas/sinistreBase64'
  '/api/v1/claims/{declarationId}/documents/{documentId}':
    parameters:
      - schema:
          type: string
        name: declarationId
        in: path
        required: true
      - schema:
          type: string
        name: documentId
        in: path
        required: true
    get:
      summary: Consulter ou télécharger un document d'une déclaration sinistre
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documentDeclarationSinistre'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Claim or document with the specified ids were not found.
      operationId: get-api-v1-claims-declarationId-documents-documentId
      security:
        - appId: []
          apiKey: []
      parameters:
        - schema:
            type: string
          in: header
          name: Accept
          description: application/json ou rien pour les metadata sinon application/octet-stream pour télécharger le fichier
      description: Retourne les données du document ou télécharge le document. La distinction du résultat se fait sur le header Accept.
      tags:
        - Claims
    patch:
      summary: Modifier un document d'une déclaration sinistre
      operationId: patch-api-v1-claims-declarationId-documents-documentId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  downloadUri:
                    type: string
                    description: Uri relative à api document pour télécharger le document
                  url:
                    type: string
                    description: Url Alfresco pour visualiser le document
                  id:
                    type: string
                required:
                  - downloadUri
                  - url
                  - id
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Claim or document with the specified ids were not found.
      description: 'Modifie les métadonnées d''un document d''une déclaration sinistre et/ou transfère ce document vers un client, un devis, un contrat, un avenant ou une autre déclaration sinistre'
      security:
        - appId: []
          apiKey: []
      parameters:
        - schema:
            type: string
          in: header
          name: Content-Type
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                op:
                  $ref: '#/components/schemas/op'
                value:
                  $ref: '#/components/schemas/valuePatch'
      tags:
        - Claims
    delete:
      summary: Supprimer un document d'une déclaration sinistre
      operationId: delete-api-v1-claims-declarationId-documents-documentId
      responses:
        '204':
          description: No Content
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Claim or document with the specified ids were not found.
      description: Supprime un document d'une déclaration sinistre
      security:
        - appId: []
          apiKey: []
      tags:
        - Claims
  '/api/v2/claims/{claimId}/documents':
    parameters:
      - schema:
          type: string
        name: claimId
        in: path
        required: true
      - schema:
          type: string
        in: query
        name: recipient
        description: Destinataire des documents
      - schema:
          type: boolean
        in: query
        name: withUts
        description: Rechercher égalements les documents liés aux Uts du sinistre
      - schema:
          type: boolean
        in: query
        name: groupBy
        description: Regrouper les documents par identifiant d'UT et par numéro de déclaration
    get:
      summary: Rechercher les documents d’une déclaration sinistre V2
      tags:
        - Claims
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/document'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Claim or document with the specified ids were not found.
      operationId: get-api-v1-claims-declarationId-documents-V2
      description: Rechercher les documents d'une déclaration sinistre
      security:
        - appId: []
          apiKey: []
      parameters:
        - schema:
            type: string
          in: header
          name: Content-Type
  '/api/v1/claims/{claimId}/documents':
    parameters:
      - schema:
          type: string
        name: claimId
        in: path
        required: true
    get:
      summary: Rechercher les documents d’une déclaration sinistre
      tags:
        - Claims
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/document'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Claim or document with the specified ids were not found.
      operationId: get-api-v1-claims-declarationId-documents
      description: Rechercher les documents d'une déclaration sinistre
      security:
        - appId: []
          apiKey: []
      parameters:
        - schema:
            type: string
          in: header
          name: Content-Type
    post:
      summary: Classer un document pour une déclaration sinistre
      operationId: post-api-v1-claims-declarationId-documents
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  url:
                    type: string
                    description: Url Alfresco pour visualiser le document
                  downloadUri:
                    type: string
                    description: Uri relative à api document pour télécharger le document
                required:
                  - id
                  - url
                  - downloadUri
        '400':
          description: Bad Request
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Claim or document with the specified ids were not found.
        '409':
          description: File already exists or disk full.
        '413':
          description: File too big.
        '415':
          description: File type is not accepted.
        '422':
          description: Unable to read file.
      tags:
        - Claims
      description: |
        Upload un document d'une déclaration sinistre

        Privilégier, si c'est possible, le format multipart/form-data plus performant et adapter a l'envoie de fichier
      security:
        - appId: []
          apiKey: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/sinistre'
          application/json:
            schema:
              $ref: '#/components/schemas/sinistreBase64'
        description: ''
  /api/v1/public-documents:
    get:
      summary: Lister les documents publique dans alfresco
      tags:
        - Public
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/PublicDocument'
                    - $ref: '#/components/schemas/GroupedPublicDocument'
        '401':
          description: Authorization information is missing or invalid.
      operationId: get-api-v1-public-documents
      description: Lister les documents publique dans alfresco
      parameters:
        - schema:
            type: string
          in: query
          name: name
          description: Nom du fichier
        - schema:
            type: string
          in: query
          name: productId
          description: code produit
        - schema:
            type: boolean
            default: false
          in: query
          name: groupByProductId
          description: grouper le resultat par code produit
  '/api/v1/public-documents/{documentId}':
    parameters:
      - schema:
          type: string
        name: documentId
        in: path
        required: true
        description: Identifiant du document
    get:
      summary: Consulter ou télécharger un document public
      tags:
        - Public
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicDocument'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Document with the specified ids were not found.
      operationId: get-api-v1-public-documents-documentId
      description: Retourne les données du document ou télécharge le document. La distinction du résultat se fait sur le header Accept.
      parameters:
        - schema:
            type: string
          in: header
          name: Accept
          description: application/json ou rien pour les metadata sinon application/octet-stream pour télécharger le fichier
  /api/v1/unspecifieds/documents:
    get:
      summary: Lister les documents temporaires
      tags:
        - Unspecifieds
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/documentTemporaire'
        '401':
          description: Authorization information is missing or invalid.
      operationId: get-api-v1-unspecifieds-documents
      description: Rechercher les documents temporaire
      security:
        - appId: []
      parameters:
        - schema:
            type: string
          in: header
          name: Content-Type
        - schema:
            type: string
          in: query
          name: businessDomain
          description: Domaine auquel est lié la pièce (par exemple "sinistre" ou "contrat")
        - schema:
            type: string
          in: query
          name: size
          description: Nombre maximum de documents renvoyés
        - schema:
            type: string
          in: query
          name: page
          description: Numéro de la page lorsque le nombre de documents total est supérieur au nombre maximal autorisé
    post:
      summary: Classer un document temporaire
      operationId: post-api-v1-unspecifieds-documents
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Id du document dans la ged
                  url:
                    type: string
                    description: Url Alfresco pour visualiser le document
                  downloadUri:
                    type: string
                    description: Lien pour télécharger le document
        '400':
          description: Bad Request
        '401':
          description: Authorization information is missing or invalid.
        '409':
          description: File already exists or disk full.
        '413':
          description: Request Entity Too Large
        '415':
          description: Unsupported Media Type
        '422':
          description: Unable to read file.
      description: |
        Upload un document temporaire

        Privilégier, si c'est possible, le format multipart/form-data plus performant et adapter a l'envoie de fichier
      security:
        - appId: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/temporaire'
          application/json:
            schema:
              $ref: '#/components/schemas/temporaireBase64'
      tags:
        - Unspecifieds
  '/api/v1/unspecifieds/documents/{documentId}':
    parameters:
      - schema:
          type: string
        name: documentId
        in: path
        required: true
    get:
      summary: Consulter un document temporaire
      tags:
        - Unspecifieds
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documentTemporaire'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documentTemporaire'
      operationId: get-api-v1-unspecifieds-documents-documentId
      description: Retourne les données du document ou télécharge le document. La distinction du résultat se fait sur le header Accept.
      security:
        - appId: []
      parameters:
        - schema:
            type: string
          in: header
          description: application/json ou rien pour les metadata sinon application/octet-stream pour télécharger le fichier
          name: Accept
    patch:
      summary: Modifier un document temporaire
      operationId: patch-api-v1-unspecifieds-documents-documentId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  downloadUri:
                    type: string
                    description: Uri relative à api document pour télécharger le document
                  url:
                    type: string
                    description: Url Alfresco pour visualiser le document
                  id:
                    type: string
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Not Found
      description: 'Modifie les métadonnées d''un document temporaire et/ou transfère ce document vers un client, un devis, un contrat, un avenant ou une déclaration sinistre'
      security:
        - appId: []
      parameters:
        - schema:
            type: string
          in: header
          name: Content-Type
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                op:
                  $ref: '#/components/schemas/op'
                value:
                  $ref: '#/components/schemas/valuePatch'
      tags:
        - Unspecifieds
components:
  securitySchemes:
    appId:
      type: apiKey
      in: header
      name: X-Auth-App-Id
    apiKey:
      type: apiKey
      in: header
      name: X-Auth-Key
  schemas:
    staticlists.Enum:
      title: ''
      type: object
      properties:
        code:
          type: string
        label:
          type: string
      required:
        - code
        - label
    avenant:
      title: avenant
      description: Métadonnées de l'avenant
      type: object
      properties:
        file:
          type: string
          format: binary
        metadata:
          type: object
          required:
            - broadcastChannels
            - type
            - origin
          properties:
            overwrite:
              type: boolean
              default: false
            broadcastChannels:
              type: array
              description: 'liste canaux de diffusion (courrier, email, sms, internet)'
              default: []
              items:
                type: string
                enum:
                  - courrier
                  - email
                  - internet
                  - sms
            type:
              $ref: '#/components/schemas/typeDefault'
            origin:
              $ref: '#/components/schemas/Origin'
            boxId:
              type: string
              description: Identifiant du carton du document
            folderId:
              type: string
              description: Identifiant du pli du document
            evidenceStatus:
              $ref: '#/components/schemas/evidenceStatus'
              description: Status du document
            documentFolderId:
              type: string
              description: Identifiant du document du pli
            folderType:
              type: string
              description: Type du pli (donne une indication aux gestionnaires afin de prioriser le traitement du pli)
      required:
        - file
        - metadata
    proposal:
      title: metadata
      description: Metadonnées devis
      type: object
      properties:
        file:
          type: string
          format: binary
        metadata:
          type: object
          required:
            - type
            - origin
          properties:
            overwrite:
              type: boolean
              default: false
            broadcastChannels:
              type: array
              description: 'liste canaux de diffusion (courrier, email, sms, internet)'
              default: []
              items:
                type: string
                enum:
                  - courrier
                  - email
                  - internet
                  - sms
            type:
              $ref: '#/components/schemas/typeDefault'
            origin:
              type: string
              description: origine du document
              enum:
                - PP
                - PF
                - PC
                - AF
                - PDT
                - EC
                - INT
                - SEP
            boxId:
              type: string
              description: Identifiant du carton du document
            folderId:
              type: string
              description: Identifiant du pli du document
            evidenceStatus:
              $ref: '#/components/schemas/evidenceStatus'
              description: Status du document
            documentFolderId:
              type: string
              description: Identifiant du document du pli
            folderType:
              type: string
              description: Type du pli (donne une indication aux gestionnaires afin de prioriser le traitement du pli)
      required:
        - file
        - metadata
    contract:
      title: metadata
      description: Metadonnées contrat
      type: object
      properties:
        file:
          type: string
          format: binary
        metadata:
          type: object
          required:
            - type
            - origin
          properties:
            overwrite:
              type: boolean
              default: false
            broadcastChannels:
              type: array
              description: 'liste canaux de diffusion (courrier, email, sms, internet)'
              default: []
              items:
                type: string
                enum:
                  - courrier
                  - email
                  - internet
                  - sms
            type:
              $ref: '#/components/schemas/typeDefault'
            origin:
              $ref: '#/components/schemas/Origin'
            boxId:
              type: string
              description: Identifiant du carton du document
            folderId:
              type: string
              description: Identifiant du pli du document
            evidenceStatus:
              $ref: '#/components/schemas/evidenceStatus'
              description: Status du document
            documentFolderId:
              type: string
              description: Identifiant du document du pli
            folderType:
              type: string
              description: Type du pli (donne une indication aux gestionnaires afin de prioriser le traitement du pli)
      required:
        - file
        - metadata
    contractBase64:
      title: metadata
      description: Metadonnées contrat
      type: object
      properties:
        overwrite:
          type: boolean
          default: false
        broadcastChannels:
          type: array
          description: 'liste canaux de diffusion (courrier, email, sms, internet)'
          default: []
          items:
            type: string
            enum:
              - courrier
              - email
              - internet
              - sms
        type:
          $ref: '#/components/schemas/typeDefault'
        origin:
          $ref: '#/components/schemas/Origin'
        boxId:
          type: string
          description: Identifiant du carton du document
        folderId:
          type: string
          description: Identifiant du pli du document
        evidenceStatus:
          $ref: '#/components/schemas/evidenceStatus'
          description: Status du document
        documentFolderId:
          type: string
          description: Identifiant du document du pli
        folderType:
          type: string
          description: Type du pli (donne une indication aux gestionnaires afin de prioriser le traitement du pli)
        file:
          $ref: '#/components/schemas/File'
      required:
        - file
        - type
        - origin
    client:
      title: metadata
      description: Metadonnées client
      type: object
      properties:
        file:
          type: string
          format: binary
        metadata:
          type: object
          required:
            - type
            - origin
          properties:
            overwrite:
              type: boolean
              default: false
            broadcastChannels:
              type: array
              description: 'liste canaux de diffusion (courrier, email, sms, internet)'
              default: []
              items:
                type: string
                enum:
                  - courrier
                  - email
                  - internet
                  - sms
            type:
              $ref: '#/components/schemas/typeClient'
            origin:
              $ref: '#/components/schemas/Origin'
            evidenceId:
              type: string
              description: identifiant de la piece
            boxId:
              type: string
              description: Identifiant du carton du document
            folderId:
              type: string
              description: Identifiant du pli du document
            evidenceStatus:
              $ref: '#/components/schemas/evidenceStatus'
              description: Status du document
            documentFolderId:
              type: string
              description: Identifiant du document du pli
      required:
        - file
        - metadata
    flotte:
      title: flotte
      type: object
      description: Metadonnées flotte
      properties:
        file:
          type: string
        metadata:
          type: object
          properties:
            overwrite:
              type: boolean
              default: false
            broadcastChannels:
              type: array
              items:
                type: string
            type:
              $ref: '#/components/schemas/typeDefault'
            origin:
              $ref: '#/components/schemas/Origin'
            entityDocumentId:
              type: string
            termYear:
              type: string
          required:
            - type
            - origin
    flotteBase64:
      title: flotte
      type: object
      description: Metadonnées flotte
      properties:
        overwrite:
          type: boolean
          default: false
        broadcastChannels:
          type: array
          items:
            type: string
        type:
          $ref: '#/components/schemas/typeDefault'
        origin:
          $ref: '#/components/schemas/Origin'
        entityDocumentId:
          type: string
        termYear:
          type: string
        file:
          $ref: '#/components/schemas/File'
      required:
        - type
        - origin
        - file
    sinistre:
      title: sinistre
      type: object
      description: Metadonnées sinistre
      properties:
        file:
          type: string
        metadata:
          type: object
          properties:
            overwrite:
              type: boolean
              default: false
            broadcastChannels:
              type: array
              items:
                $ref: '#/components/schemas/broadcastChannel'
            type:
              $ref: '#/components/schemas/TypeClaim'
            origin:
              $ref: '#/components/schemas/Origin'
            recipient:
              type: string
              description: Destinataire de la pièce
            folderId:
              type: string
              description: Identifiant du pli archivé (concerne uniquement les documents provenants du flux de numérisation)
            boxId:
              type: string
              description: Identifiant du carton d'archive (concerne uniquement les documents provenants du flux de numérisation)
            evidenceStatus:
              type: string
              description: Statut de la pièce
            documentFolderId:
              type: string
              description: Identifiant du document archivé (concerne uniquement les documents provenants du flux de numérisation)
            primaClaimsId:
              type: string
              description: Identifiant de la pièce prima Claims (uniquement si la pièce a été rattachée à une pièce d'UT prima claims)
            primaClaimsType:
              type: string
              description: Libellé du type de pièce prima Claims (uniquement si la pièce a été rattachée à une pièce d'UT prima claims)
          required:
            - type
            - origin
    sinistreBase64:
      title: sinistre
      type: object
      description: Metadonnées sinistre
      properties:
        overwrite:
          type: boolean
          default: false
        broadcastChannels:
          type: array
          items:
            $ref: '#/components/schemas/broadcastChannel'
        type:
          $ref: '#/components/schemas/TypeClaim'
        origin:
          $ref: '#/components/schemas/Origin'
        recipient:
          type: string
          description: Destinataire de la pièce
        primaClaimsId:
          type: string
          description: Identifiant du sinistre lier a la pièces
        primaClaimsType:
          type: string
          description: Type de document sinistre
        file:
          $ref: '#/components/schemas/File'
      required:
        - type
        - origin
        - file
    document:
      title: metadata
      description: Metadonnées d'un document
      type: object
      properties:
        type:
          type: string
          enum:
            - client
            - contract
            - proposal
            - endorsement
            - claim
          description: type de l'acte de gestion à l'origine du document
        metadata:
          type: object
          required:
            - type
            - origin
            - sensitivity
          properties:
            broadcastChannels:
              type: array
              description: 'liste canaux de diffusion (courrier, email, sms, internet)'
              items:
                $ref: '#/components/schemas/broadcastChannel'
            type:
              $ref: '#/components/schemas/type'
            origin:
              $ref: '#/components/schemas/Origin'
            sensitivity:
              type: string
              description: sensibilité du document
              enum:
                - 1
                - 2
                - 3
                - 4
                - 5
            evidenceId:
              type: string
              description: identifiant de la piece
            recipient:
              type: string
              description: Destinataire de la pièce
            boxId:
              type: string
              description: Identifiant du carton d'archive (concerne uniquement les documents provenants du flux de numérisation)
            folderId:
              type: string
              description: Identifiant du pli archivé (concerne uniquement les documents provenants du flux de numérisation)
            evidenceStatus:
              $ref: '#/components/schemas/evidenceStatus'
            documentFolderId:
              type: string
              description: Identifiant du document archivé (concerne uniquement les documents provenants du flux de numérisation)
            primaClaimsId:
              type: string
              description: Identifiant de la pièce prima Claims (concerne uniquement les pièces rattachées à une pièce d'UT sous prima Claims)
            primaClaimsType:
              type: string
              description: Libellé du type de pièce prima Claims (concerne uniquement les pièces rattachées à une pièce d'UT sous prima Claims)
        createdAt:
          description: date de création du document
          format: date-time
          type: string
        modifiedAt:
          type: string
          format: date-time
          description: Date de modification du document
        id:
          type: string
          description: id technique du document
        name:
          type: string
          description: nom du document
        url:
          type: string
          description: Url Alfresco pour visualiser le document
        downloadUri:
          type: string
          description: Uri relative à api document pour télécharger le document
        entityId:
          type: string
      required:
        - metadata
        - createdAt
        - modifiedAt
        - id
        - name
        - url
        - downloadUri
        - entityId
    documentContract:
      title: contrat
      type: object
      description: ''
      properties:
        name:
          type: string
          description: nom du fichier
        id:
          type: string
          description: identifiant du fichier
        metadata:
          description: Metadata
          type: object
          required:
            - contractId
            - origin
            - type
            - sensitivity
            - nature
            - status
            - productId
            - clientId
          properties:
            contractId:
              type: string
              description: numéro du contrat
            origin:
              $ref: '#/components/schemas/Origin'
            type:
              $ref: '#/components/schemas/typeDefault'
            broadcastChannels:
              type: array
              description: 'liste canaux de diffusion (courrier, email, sms, internet)'
              default: []
              items:
                $ref: '#/components/schemas/broadcastChannel'
            effectiveDate:
              type: string
              description: date d'effet du contrat
              format: date-time
            sensitivity:
              type: string
              description: niveau de sensibilité du document
              enum:
                - '1'
                - '2'
                - '3'
                - '4'
                - '5'
            endorsementId:
              type: string
              description: référence avenant contrat
            nature:
              type: string
              description: nature du contrat
            status:
              type: string
              description: status du contrat
            cancellationDate:
              type: string
              format: date-time
              description: date de resiliation du contrat
            productId:
              type: string
              description: produit du contrat
            clientId:
              type: string
              description: Id du client dans Prima
            vehicleId:
              type: string
              description: Numéro d'immatriculation du véhicule
            evidenceId:
              type: string
              description: identifiant de la piece
            folderId:
              type: string
              description: Id du pli
            boxId:
              type: string
              description: Id du carton
            evidenceStatus:
              $ref: '#/components/schemas/evidenceStatus'
              description: Status du document
            documentFolderId:
              type: string
              description: Identifiant du document du pli
            folderType:
              type: string
              description: Type du pli (donne une indication aux gestionnaires afin de prioriser le traitement du pli)
        modifiedAt:
          type: string
          format: date-time
          description: Date de modification du document
        createdAt:
          type: string
          format: date-time
          description: Date de création du document
        url:
          type: string
          description: Url permettant de télécharger le document
      required:
        - name
        - id
        - metadata
        - modifiedAt
        - createdAt
        - url
    documentProposal:
      title: devis
      type: object
      properties:
        name:
          type: string
          description: nom du fichier
        id:
          type: string
          description: identifiant du fichier
        metadata:
          description: Metadata
          type: object
          required:
            - productId
            - status
            - nature
            - proposalId
            - versionId
            - type
            - sensitivity
            - origin
            - clientId
          properties:
            effectiveDate:
              type: string
              description: date d'effet du devis
            productId:
              type: string
              description: produit du devis
            status:
              type: string
              description: statut du devis
            nature:
              type: string
              description: type de devis
              enum:
                - particulier
                - flotte
            proposalId:
              type: string
              description: numéro de devis
            versionId:
              type: string
              description: version du devis
            broadcastChannels:
              type: array
              description: 'liste canaux de diffusion (courrier, email, sms, internet)'
              default: []
              items:
                $ref: '#/components/schemas/broadcastChannel'
            type:
              $ref: '#/components/schemas/typeDefault'
            sensitivity:
              type: string
              description: niveau de sensibilité du document
              enum:
                - '1'
                - '2'
                - '3'
                - '4'
                - '5'
            origin:
              $ref: '#/components/schemas/Origin'
            clientId:
              type: string
              description: Id du client dans prima
            folderId:
              type: string
              description: Id du pli
            boxId:
              type: string
              description: Id du carton
            evidenceStatus:
              $ref: '#/components/schemas/evidenceStatus'
              description: Status du document
            documentFolderId:
              type: string
              description: Identifiant du document du pli
            folderType:
              type: string
              description: Type du pli (donne une indication aux gestionnaires afin de prioriser le traitement du pli)
        modifiedAt:
          type: string
          format: date-time
          description: Date de modification du document
        createdAt:
          type: string
          format: date-time
          description: Date de création du document
        url:
          type: string
          description: Url permettant de télécharger le document
      required:
        - name
        - id
        - metadata
        - modifiedAt
        - createdAt
        - url
    documentClient:
      title: document client
      description: Métadonnées d'un document client
      type: object
      properties:
        name:
          type: string
          description: nom du fichier
        id:
          type: string
          description: identifiant du fichier
        metadata:
          description: Metadata
          type: object
          required:
            - role
            - clientId
            - type
            - sensitivity
            - origin
          properties:
            role:
              type: string
              description: Rôle du client
            clientId:
              type: string
              description: numéro du client
            intermediary:
              type: string
              description: 'Intermédiaire '
            indicator:
              type: string
              description: indicateur d'affaire
            broadcastChannels:
              type: array
              description: 'liste canaux de diffusion (courrier, email, sms, internet)'
              default: []
              items:
                $ref: '#/components/schemas/broadcastChannel'
            type:
              $ref: '#/components/schemas/typeClient'
            sensitivity:
              type: string
              description: niveau de sensibilité du document
              enum:
                - '1'
                - '2'
                - '3'
                - '4'
                - '5'
            origin:
              $ref: '#/components/schemas/Origin'
            evidenceId:
              type: string
              description: identifiant de la piece
            folderId:
              type: string
              description: Id du pli
            boxId:
              type: string
              description: Id du carton
            evidenceStatus:
              $ref: '#/components/schemas/evidenceStatus'
              description: Status du document
            folderType:
              type: string
              description: Type du pli (donne une indication aux gestionnaires afin de prioriser le traitement du pli)
            documentFolderId:
              type: string
              description: Identifiant du document du pli
        modifiedAt:
          type: string
          format: date-time
          description: Date de modification du document
        createdAt:
          type: string
          format: date-time
          description: Date de création du document
        url:
          type: string
          description: Url permettant de télécharger le document
      required:
        - name
        - id
        - metadata
        - modifiedAt
        - createdAt
        - url
    documentAvenant:
      title: document avenant
      type: object
      description: Métadonnées de l'avenant
      properties:
        name:
          type: string
          description: nom du fichier
        id:
          type: string
          description: identifiant du fichier
        metadata:
          description: Metadata
          type: object
          required:
            - type
            - sensitivity
            - origin
            - clientId
            - endorsementId
            - versionId
            - status
            - productId
            - refContractId
          properties:
            broadcastChannels:
              type: array
              description: 'liste canaux de diffusion (courrier, email, sms, internet)'
              default: []
              items:
                $ref: '#/components/schemas/broadcastChannel'
            type:
              $ref: '#/components/schemas/typeDefault'
            sensitivity:
              type: string
              description: niveau de sensibilité du document
              enum:
                - '1'
                - '2'
                - '3'
                - '4'
                - '5'
            origin:
              $ref: '#/components/schemas/Origin'
            clientId:
              type: string
              description: Id du client
            endorsementId:
              type: string
              description: Id de l'avenant du contrat
            versionId:
              type: string
              description: Id de la version de l'avenant
            natureEndorsement:
              type: string
              description: Nature de l'avenant
            status:
              type: string
              description: Status de l'avenant
            productId:
              type: string
              description: Type produit de l'avenant
            refContractId:
              type: string
              description: Id du contrat auquel l'avenant est lié
            effectiveDate:
              type: string
              description: Date d'effet de l'avenant
            evidenceId:
              type: string
              description: identifiant de la piece
            folderId:
              type: string
              description: Id du pli
            boxId:
              type: string
              description: Id du carton
            evidenceStatus:
              $ref: '#/components/schemas/evidenceStatus'
              description: Status du document
            documentFolderId:
              type: string
              description: Identifiant du document du pli
            folderType:
              type: string
              description: Type du pli (donne une indication aux gestionnaires afin de prioriser le traitement du pli)
        modifiedAt:
          type: string
          format: date-time
          description: Date de modification du document
        createdAt:
          type: string
          format: date-time
          description: Date de création du document
        url:
          type: string
          description: Url permettant de télécharger le document
      required:
        - name
        - id
        - metadata
        - modifiedAt
        - createdAt
        - url
    documentFlotte:
      title: documentFlotte
      type: object
      description: Metadonnées d'un document flotte
      properties:
        id:
          type: string
          description: id technique du document
        url:
          type: string
          description: Url Alfresco pour visualiser le document
        downloadUri:
          type: string
          description: Uri relative à api document pour télécharger le document
        name:
          type: string
          description: nom du document
        type:
          type: string
          description: type de l'acte de gestion à l'origine du document
        metadata:
          type: object
          required:
            - type
            - origin
            - sensitivity
          properties:
            broadcastChannels:
              type: array
              description: 'liste canaux de diffusion (courrier, email, sms, internet)'
              items:
                $ref: '#/components/schemas/broadcastChannel'
            type:
              $ref: '#/components/schemas/typeDefault'
            origin:
              $ref: '#/components/schemas/Origin'
            sensitivity:
              type: string
              description: sensibilité du document
            entityDocumentId:
              type: string
              description: numéro de facture
            termYear:
              type: string
              description: année tarifaire du document
            contractId:
              type: string
              description: numéro du contrat
            clientId:
              type: string
              description: identifiant client
            endorsementId:
              type: string
              description: numéro d'avenant du contrat
            natureContract:
              type: string
              description: nature du contrat
            id:
              type: string
              description: identifiant technique du document
            status:
              type: string
              description: status du contrat
            effectiveDate:
              type: string
              description: date de prise d'effet du contrat
            cancellationDate:
              type: string
              description: date de résiliation du contrat
            productType:
              type: string
              description: identification du produit d'assurance
            entityId:
              type: string
              description: identifiant de l'entité
        createdAt:
          type: string
          description: date de création du document
          format: date-time
        modifiedAt:
          type: string
          description: Date de modification du document
          format: date-time
      required:
        - id
        - url
        - downloadUri
        - name
        - metadata
        - createdAt
        - modifiedAt
    documentSinistre:
      title: documentSinistre
      type: object
      description: Metadonnées d'un document sinistre
      properties:
        id:
          type: string
          description: id technique du document
        url:
          type: string
          description: Url Alfresco pour visualiser le document
        downloadUri:
          type: string
          description: Uri relative à api document pour télécharger le document
        name:
          type: string
          description: nom du document
        type:
          type: string
          description: type de l'acte de gestion à l'origine du document
        metadata:
          type: object
          required:
            - type
            - origin
            - sensitivity
            - claimId
          properties:
            broadcastChannels:
              type: array
              description: 'liste canaux de diffusion (courrier, email, sms, internet)'
              items:
                $ref: '#/components/schemas/broadcastChannel'
            type:
              $ref: '#/components/schemas/TypeClaim'
            origin:
              $ref: '#/components/schemas/Origin'
            sensitivity:
              type: string
              description: sensibilité du document
            contractId:
              type: string
              description: numéro du contrat
            clientId:
              type: string
              description: identifiant client
            nature:
              type: string
              description: nature du sinistre
            status:
              type: string
              description: status du sinistre
            occurationDate:
              type: string
              description: date à laquelle à eu lieu le sinistre
            cancellationDate:
              type: string
              description: date de cloturation du sinistre
            folderId:
              type: string
              description: Identifiant du pli de la pièce dans les archives
            boxId:
              type: string
              description: Identifiant du carton de la pièce dans les archives
            evidenceStatus:
              type: string
              description: Statut de la pièce
            documentFolderId:
              type: string
              description: Identifiant du document de la pièce dans les archives
            productType:
              type: string
              description: identification du produit d'assurance
            claimId:
              type: string
              description: Id de la declaration sinistre
            sinistreId:
              type: string
              description: Id du sinistre
            utId:
              type: string
              description: Id de l'Ut du sinistre
            recipient:
              type: string
              description: Destinataire de la pièce
            evidenceId:
              type: string
              description: Identifiant de la pièce
            primaClaimsId:
              type: string
              description: Identifiant de pièce Prima Claims (uniquement si le document a été rattaché à une pièce d'UT prima claims)
            primaClaimsType:
              type: string
              description: Libellé de type de pièce prima Claims (uniquement si le document a été rattaché à une pièce d'UT prima claims)
        createdAt:
          type: string
          description: date de création du document
        modifiedAt:
          type: string
          description: Date de modification du document
      required:
        - id
        - url
        - downloadUri
        - name
        - type
        - metadata
        - createdAt
        - modifiedAt
    documentDeclarationSinistre:
      title: documentDeclarationSinistre
      type: object
      description: Metadonnées d'un document declaration sinistre
      properties:
        id:
          type: string
          description: id technique du document
        url:
          type: string
          description: Url Alfresco pour visualiser le document
        downloadUri:
          type: string
          description: Uri relative à api document pour télécharger le document
        name:
          type: string
          description: nom du document
        type:
          type: string
          description: type de l'acte de gestion à l'origine du document
        metadata:
          type: object
          properties:
            broadcastChannels:
              type: array
              description: 'liste canaux de diffusion (courrier, email, sms, internet)'
              items:
                $ref: '#/components/schemas/broadcastChannel'
            type:
              $ref: '#/components/schemas/TypeClaim'
            origin:
              $ref: '#/components/schemas/Origin'
            sensitivity:
              type: string
              description: sensibilité du document
            contractId:
              type: string
              description: numéro du contrat
            clientId:
              type: string
              description: identifiant client
            status:
              type: string
              description: status du sinistre
            occurationDate:
              type: string
              description: date à laquelle à eu lieu le sinistre
            cancellationDate:
              type: string
              description: date de cloturation du sinistre
            folderId:
              type: string
              description: Identifiant du pli de la pièce dans les archives
            boxId:
              type: string
              description: Identifiant du carton de la pièce dans les archives
            evidenceStatus:
              type: string
              description: Statut de la pièce
            documentFolderId:
              type: string
              description: Identifiant du document de la pièce dans les archives
            productType:
              type: string
              description: identification du produit d'assurance
            claimId:
              type: string
              description: Id de la declaration sinistre
            recipient:
              type: string
              description: Destinataire de la pièce
            evidenceId:
              type: string
              description: Identifiant de la pièce
          required:
            - type
            - origin
            - sensitivity
            - claimId
        createdAt:
          type: string
          description: date de création du document
        modifiedAt:
          type: string
          description: Date de modification du document
      required:
        - id
        - url
        - downloadUri
        - name
        - type
        - createdAt
        - modifiedAt
    File:
      type: object
      properties:
        fileName:
          type: string
          description: Nom du fichier
        contentType:
          type: string
          description: 'Type de fichier. Exemple : application/pdf ou image/png'
        base64Bytes:
          type: string
          description: Contenue du fichier en base 64
    Error:
      type: object
      properties:
        path:
          type: string
          description: Chemin du champ en erreur
        message:
          type: string
          description: Details de l'erreur
        args:
          type: array
          description: 'Indications pour éviter l''erreur (valeurs acceptées, pattern accepté ...)'
          items:
            type: string
    ErrorResponse:
      title: ResponsError
      type: object
      properties:
        message:
          type: string
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    Origin:
      type: string
      title: Origin
      enum:
        - PP
        - PDT
        - PC
        - AF
        - PF
        - EC
        - BPM
        - INT
        - SEP
        - NUM
      description: Origine d'un document
    broadcastChannel:
      title: broadcastChannel
      description: 'liste canaux de diffusion (courrier, email, sms, internet)'
      enum:
        - courrier
        - email
        - internet
        - sms
      type: array
      items:
        type: string
    type:
      type: string
      title: type
      description: type de la pièce
      enum:
        - AR_CPC
        - AR_CPCO
        - ATPCRSAM
        - ATPCSUS
        - CNI
        - CPC
        - CPCO
        - DOM
        - AM
        - AMO
        - AP
        - APO
        - ATAPV
        - ATKM
        - ATNS
        - ARTPO
        - AA_BAE
        - AA_BAO
        - AR_BA
        - AR_BAE
        - AR_BAO
        - AR_CHQ
        - AR_RIO
        - BAE
        - AR_RI
        - CANCELLED
        - CBON
        - CCG
        - CERTIFICATE
        - CERTIFICATE_CHILDREN
        - CERTIFICATE_ROOMMATE
        - CG
        - CGO
        - CHQ
        - DIVERS
        - DUNNING
        - ENDORSEMENTADMINISTRATIVE
        - ENDORSEMENTPROJECT
        - EXTRANET_GREENCARD
        - FIRSTREVIVAL
        - FORMAL_DEMAND
        - FT001_CARTE_VERTE_FLOTTES
        - GREENCARD
        - LOA
        - MONTHLY
        - MRH_CERTIFICATE
        - POLICY
        - PJ
        - PRERENEWAL
        - PR001_ATTEST_ASSISTANTE_MATERN
        - PR001_ATTESTATION_AAC
        - PR001_ATTESTATION_RC
        - PR001_ATTESTATION_RC_EMPLOYEUR
        - PR001_ATTESTATION_USAGE
        - PR001_NOTE_COUVERTURE
        - PR002_ATTESTATION_AUTO_RA
        - PR003_ATTESTATION_ASS_SCO
        - PR003_ATTESTATION_LOC_SALLE
        - PR003_ATTESTATION_RC_CHIEN
        - PR003_ATTESTATION_RC_COLOC
        - PR003_ATTESTATION_RC_GARAGE
        - PR003_ATTESTATION_RC_LOCATIVE
        - PR003_ATTESTATION_RC_SCOLAIRE
        - PR003_ATTESTATION_RC_STAGE
        - PR003_ATTESTATION_RC_VILLEGIAT
        - PR004_RELEVE_INFORMATIONS
        - PR005_PROPOSITION_AUTO
        - PR006_PROPOSITION_MRH
        - PR007_CP_AUTO
        - PR008_CP_MRH
        - PR009_AE_AUTO
        - PR010_AE_MRH
        - PR011_CARTE_VERTE
        - PR011_CARTE_VERTE_PROVISOIRE
        - PR011_CARTE_VERTE_REMORQUE
        - PR012_MANDAT
        - PR013_COURRIER_LIBRE
        - PR014_COURRIERS_IMPAYES
        - PR016_MED
        - PR017_BORDEREAU_LRAR
        - PR018_LETTRE_PROPO
        - PR019_PROPOSITION_AUTO_RA
        - PR021_LETTRE_AV
        - PR022_LETTRE_RESIL
        - PR023_LETTRE_AE
        - PR026_COURRIERS_RELANCE_PJ
        - PR028_REFUS_DE_RESILIATION
        - PR029_MANDAT_LOI_HAMON
        - PR030_AR_CLIENT
        - PR031_SUCCESSION
        - PR035_COURRIER_SANS_EFFET
        - PR036_FACTURE_MENSUELLE
        - PR037_HAMON_UNIQUE
        - PR039_ATTESTATION_MRH
        - PR040_ENVOI_PACK_ROUTE
        - PR042_CP_ACC_VIE
        - PR043_PROPO_ACC_VIE
        - PR044_ATTESTATION_ACC_VIE
        - PR045_AE_ACC_VIE
        - PR046_CP_ASSU_UNIQUE
        - PR047_PROPO_ASSUR_UNIQUE
        - PR048_ESTIM_TARIF_ASSUR_UNIQUE
        - PR049_ATTEST_ASSUR_UNIQUE
        - PR050_AE_ASSUR_UNIQUE
        - PR051_REFUS_RESIL_HAMON
        - PR052_CONF_RESIL_HAMON
        - PROPOSAL
        - PVPO
        - REGISTEREDMAIL
        - RENEWALGC
        - RESI
        - REXMED
        - RIB
        - RIO
        - RIBO
        - RINF
        - SIN000_LETTRE_LIBRE
        - SIN123_PRISE_EN_CHARGE_BEV
        - SYNTHESIS
        - SYNTHESISEP
        - SYNTHESISPD
        - TERMINATIONCONFIRM
        - UNKN
        - PR003_ATTESTATION_RC_PNO
        - PR006_PROPOSITON_MRH
        - PR025_BORDEREAU_BANQUE
        - PR027_CG_AVANT_SOUSCRIPTION
        - PR032_RELANCE_PC
        - PR033_RELANCE_PJ_RAG
        - PR034_COURRIER_ECHEANCIER_REVAL
        - PR038_PROPO_AVENANT
        - PR041_ATTESTATION_TELETRAVAIL
    typeDefault:
      type: string
      title: typeDefault
      description: type de la pièce non client
      enum:
        - AM
        - AMO
        - AP
        - APO
        - ATAPV
        - ATKM
        - ATNS
        - ARTPO
        - AA_BAE
        - AA_BAO
        - AR_BA
        - AR_BAE
        - AR_BAO
        - AR_CHQ
        - AR_RIO
        - BAE
        - AR_RI
        - CANCELLED
        - CBON
        - CCG
        - CERTIFICATE
        - CERTIFICATE_CHILDREN
        - CERTIFICATE_ROOMMATE
        - CG
        - CGO
        - CHQ
        - DIVERS
        - DUNNING
        - ENDORSEMENTADMINISTRATIVE
        - ENDORSEMENTPROJECT
        - EXTRANET_GREENCARD
        - FIRSTREVIVAL
        - FORMAL_DEMAND
        - FT001_CARTE_VERTE_FLOTTES
        - GREENCARD
        - LOA
        - MONTHLY
        - MRH_CERTIFICATE
        - POLICY
        - PJ
        - PRERENEWAL
        - PR001_ATTEST_ASSISTANTE_MATERN
        - PR001_ATTESTATION_AAC
        - PR001_ATTESTATION_RC
        - PR001_ATTESTATION_RC_EMPLOYEUR
        - PR001_ATTESTATION_USAGE
        - PR001_NOTE_COUVERTURE
        - PR002_ATTESTATION_AUTO_RA
        - PR003_ATTESTATION_ASS_SCO
        - PR003_ATTESTATION_LOC_SALLE
        - PR003_ATTESTATION_RC_CHIEN
        - PR003_ATTESTATION_RC_COLOC
        - PR003_ATTESTATION_RC_GARAGE
        - PR003_ATTESTATION_RC_LOCATIVE
        - PR003_ATTESTATION_RC_SCOLAIRE
        - PR003_ATTESTATION_RC_STAGE
        - PR003_ATTESTATION_RC_VILLEGIAT
        - PR004_RELEVE_INFORMATIONS
        - PR005_PROPOSITION_AUTO
        - PR006_PROPOSITION_MRH
        - PR007_CP_AUTO
        - PR008_CP_MRH
        - PR009_AE_AUTO
        - PR010_AE_MRH
        - PR011_CARTE_VERTE
        - PR011_CARTE_VERTE_PROVISOIRE
        - PR011_CARTE_VERTE_REMORQUE
        - PR012_MANDAT
        - PR013_COURRIER_LIBRE
        - PR014_COURRIERS_IMPAYES
        - PR016_MED
        - PR017_BORDEREAU_LRAR
        - PR018_LETTRE_PROPO
        - PR019_PROPOSITION_AUTO_RA
        - PR021_LETTRE_AV
        - PR022_LETTRE_RESIL
        - PR023_LETTRE_AE
        - PR026_COURRIERS_RELANCE_PJ
        - PR028_REFUS_DE_RESILIATION
        - PR029_MANDAT_LOI_HAMON
        - PR030_AR_CLIENT
        - PR031_SUCCESSION
        - PR035_COURRIER_SANS_EFFET
        - PR036_FACTURE_MENSUELLE
        - PR037_HAMON_UNIQUE
        - PR039_ATTESTATION_MRH
        - PR040_ENVOI_PACK_ROUTE
        - PR042_CP_ACC_VIE
        - PR043_PROPO_ACC_VIE
        - PR044_ATTESTATION_ACC_VIE
        - PR045_AE_ACC_VIE
        - PR046_CP_ASSU_UNIQUE
        - PR047_PROPO_ASSUR_UNIQUE
        - PR048_ESTIM_TARIF_ASSUR_UNIQUE
        - PR049_ATTEST_ASSUR_UNIQUE
        - PR050_AE_ASSUR_UNIQUE
        - PR051_REFUS_RESIL_HAMON
        - PR052_CONF_RESIL_HAMON
        - PROPOSAL
        - PVPO
        - REGISTEREDMAIL
        - RENEWALGC
        - RESI
        - REXMED
        - RIB
        - RIO
        - RIBO
        - RINF
        - SIN000_LETTRE_LIBRE
        - SIN123_PRISE_EN_CHARGE_BEV
        - SYNTHESIS
        - SYNTHESISEP
        - SYNTHESISPD
        - TERMINATIONCONFIRM
        - UNKN
        - PR003_ATTESTATION_RC_PNO
        - PR006_PROPOSITON_MRH
        - PR025_BORDEREAU_BANQUE
        - PR027_CG_AVANT_SOUSCRIPTION
        - PR032_RELANCE_PC
        - PR033_RELANCE_PJ_RAG
        - PR034_COURRIER_ECHEANCIER_REVAL
        - PR038_PROPO_AVENANT
        - PR041_ATTESTATION_TELETRAVAIL
    evidenceStatus:
      type: string
      title: evidenceStatus
      description: Status de la pièce
      enum:
        - ATRAITER
        - AIDENTIFIER
        - AAFFECTER
        - NONCONFORME
        - CLASSE
        - HORSALTIMA
    typeClient:
      type: string
      title: typeClient
      description: type de la pièce client
      enum:
        - AR_CPC
        - AR_CPCO
        - ATPCRSAM
        - ATPCSUS
        - CNI
        - CPC
        - CPCO
        - DOM
    TypeClaim:
      title: TypeClaim
      type: string
      description: type de la pièce sinistre
    op:
      type: string
      title: op
      description: |-
        updateMeta : Correction des métadatas du document

         moveToClient : Déplacement du document vers un client

         moveToProposal : Déplacement du document vers un devis

         moveToContract : Déplacement du document vers un contrat

         moveToEndorsement : Déplacement du document vers un avenant

         moveToClaim: : Déplacement du document vers un sinistre

         moveToClaimUt : Déplacement du document vers un sinistre Ut
      enum:
        - updateMeta
        - moveToClient
        - moveToProposal
        - moveToContract
        - moveToEndorsement
    valuePatch:
      title: valuePatch
      type: object
      description: |-
        Si op : updateMeta alors seulement type obligatoire

         Si op : moveToClient alors type et clientId obligatoire

         Si op : moveToProposal alors type et proposalId-proposalVersion obligatoire

         Si op : moveToContract alors type et contractId obligatoire

         Si op : moveToEndorsement alors type et endorsementId-endorsementVersion obligatoire

         Si op : moveToClaim alors type et claimId obligatoire

         Si op : moveToClaimUt alors type, claimId et utId obligatoire
      properties:
        clientId:
          type: string
        proposalId-proposalVersion:
          type: string
        contractId:
          type: string
        endorsementId-endorsementVersion:
          type: string
        type:
          $ref: '#/components/schemas/type'
        origin:
          $ref: '#/components/schemas/Origin'
        broadcastChannels:
          type: array
          items:
            type: string
        claimId:
          type: string
        utId:
          type: string
        evidenceId:
          type: string
          description: identifiant de la piece
        recipient:
          type: string
        evidenceStatus:
          $ref: '#/components/schemas/evidenceStatus'
          description: Status du document
        folderId:
          type: string
          description: Id du pli
        boxId:
          type: string
          description: Id du carton
        folderType:
          type: string
          description: Type du pli (donne une indication aux gestionnaires afin de prioriser le traitement du pli)
        documentFolderId:
          type: string
          description: Identifiant du document du pli
        primaClaimsId:
          type: string
          description: Identifiant du sinistre lier a la pièces
        primaClaimsType:
          type: string
          description: Type de document sinistre
      required:
        - type
    GroupedPublicDocument:
      title: GroupedPublicDocument
      type: object
      properties:
        productId:
          type: string
          description: code produit
        documents:
          type: array
          items:
            $ref: '#/components/schemas/PublicDocument'
    PublicDocument:
      title: PublicDocument
      type: object
      properties:
        id:
          type: string
          description: Id technique du document
        url:
          type: string
          description: url du document dans le system où il est présent
        downloadUri:
          type: string
          description: Uri qui permet de télécharger le document dans son système
        name:
          type: string
          description: Nom du fichier uploadé
        productId:
          type: string
          description: Code produit
        createdAt:
          type: string
          description: Date de création
        modifiedAt:
          type: string
          description: Date de mise à jour
    GroupedDocuments:
      title: GroupedDocuments
      type: object
      description: ''
      properties:
        entityId:
          type: string
        documents:
          type: array
          items:
            $ref: '#/components/schemas/document'
    temporaire:
      title: temporaire
      x-stoplight:
        id: tl1g3h1scpj3b
      type: object
      description: Metadonnées d'un document temporaire
      properties:
        file:
          type: string
        metadata:
          type: object
          properties:
            overwrite:
              type: boolean
              description: Permet d'écraser le document lors d'un upload
            type:
              type: string
            origin:
              $ref: '#/components/schemas/Origin'
            businessDomain:
              type: string
              description: Domaine auquel est lié la pièce (par exemple "sinistre" ou "contrat")
            folderId:
              type: string
              description: Id du pli
            boxId:
              type: string
              description: Id du carton
            folderType:
              type: string
              description: Type du pli (donne une indication aux gestionnaires afin de prioriser le traitement du pli)
            clientId:
              type: string
              description: Renseigné en cas de pli concernant un sinistre non identifié
            contractId:
              type: string
              description: Renseigné en cas de pli concernant un sinistre non identifié
            documentFolderId:
              type: string
              description: Identifiant du document du pli
          required:
            - origin
            - businessDomain
            - folderId
            - boxId
            - folderType
            - documentFolderId
      required:
        - file
    temporaireBase64:
      title: temporaire
      type: object
      description: Metadonnées d'un document temporaire
      properties:
        overwrite:
          type: boolean
          description: Permet d'écraser le document lors d'un upload
        type:
          type: string
        origin:
          $ref: '#/components/schemas/Origin'
        businessDomain:
          type: string
          description: Domaine auquel est lié la pièce (par exemple "sinistre" ou "contrat")
        folderId:
          type: string
          description: Id du pli
        boxId:
          type: string
          description: Id du carton
        folderType:
          type: string
          description: Type du pli (donne une indication aux gestionnaires afin de prioriser le traitement du pli)
        clientId:
          type: string
          description: Renseigné en cas de pli concernant un sinistre non identifié
        contractId:
          type: string
          description: Renseigné en cas de pli concernant un sinistre non identifié
        documentFolderId:
          type: string
          description: Identifiant du document du pli
        file:
          $ref: '#/components/schemas/File'
      required:
        - origin
        - businessDomain
        - folderId
        - boxId
        - folderType
        - documentFolderId
        - file
    documentTemporaire:
      title: temporaireDocument
      type: object
      x-examples:
        example-1:
          downloadUri: /api/v1/unspecifieds/documents/cf74f558-45e7-431a-b82f-46e5bab05629?businessDomain=contrat&size=10&page=1
          name: TEST-DOCUMENT59.pdf
          url: 'http://10.0.4.21:8080/alfresco/api/-default-/public/cmis/versions/1.1/atom/content/TEST-DOCUMENT59.pdf?id=cf74f558-45e7-431a-b82f-46e5bab05629'
          metadata:
            businessDomain: contrat
            boxId: '10'
            origin: PDT
            folderType: courrier
            folderId: '1'
            type: FT002_ETAT_PARC
            documentFolderId: '78482832'
          type: unspecified
          id: cf74f558-45e7-431a-b82f-46e5bab05629
          createdAt: '2022-06-14T15:11:21.657'
          modifiedAt: '2022-06-14T15:11:34.92'
      description: Métadonnées d'un document temporaire
      properties:
        downloadUri:
          type: string
          description: Lien pour télécharger le document
        name:
          type: string
          description: Nom du fichier
        url:
          type: string
          description: Lien pour visualiser le document dans la ged
        metadata:
          type: object
          properties:
            businessDomain:
              type: string
              description: Domaine auquel est lié la pièce (par exemple "sinistre" ou "contrat")
            type:
              type: string
            origin:
              $ref: '#/components/schemas/Origin'
            folderId:
              type: string
              description: Id du pli
            boxId:
              type: string
              description: Id du carton
            folderType:
              type: string
              description: Type du pli (donne une indication aux gestionnaires afin de prioriser le traitement du pli)
            clientId:
              type: string
              description: Renseigné en cas de pli concernant un sinistre non identifié
            contractId:
              type: string
              description: Renseigné en cas de pli concernant un sinistre non identifié
            documentFolderId:
              type: string
              description: Identifiant du document du pli
        id:
          type: string
          description: Id du document en ged
        createdAt:
          type: string
          description: Date de création du document
        modifiedAt:
          type: string
          description: Date de modification du document
tags:
  - name: clientDocument
    x-displayName: Le modèle document client
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/documentClient"  showReadOnly={true} showWriteOnly={true}/>
  - name: proposalDocument
    x-displayName: Le modèle document devis
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/documentProposal" showReadOnly={true} showWriteOnly={true} />
  - name: contractDocument
    x-displayName: Le modèle document contrat
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/documentContract" showReadOnly={true} showWriteOnly={true} />
  - name: avenantDocument
    x-displayName: Le modèle document avenant
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/documentAvenant" showReadOnly={true} showWriteOnly={true}/>
  - name: declarationSinistreDocument
    x-displayName: Le modèle document declaration sinistre
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/documentDeclarationSinistre" showReadOnly={true} showWriteOnly={true}/>
  - name: sinistreDocument
    x-displayName: Le modèle document sinistre
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/documentSinistre" showReadOnly={true} showWriteOnly={true}/>
  - name: temporaireDocument
    x-displayName: Le modèle document temporaire
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/documentTemporaire" showReadOnly={true} showWriteOnly={true}/>
  - name: errors
    x-displayName: Le modèle Erreur
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/ErrorResponse" exampleRef="#/components/examples/ErrorResponse" showReadOnly={true} showWriteOnly={true} />
x-tagGroups:
  - name: Healthcheck
    tags:
      - Health
      - Info
  - name: Documents
    tags:
      - Clients
      - Contracts
      - Proposals
      - Endorsements
      - Claims
      - Fleets
      - Public
      - Unspecifieds
      - UT
  - name: Listes statiques
    tags:
      - Listes statiques
  - name: Models
    tags:
      - clientDocument
      - proposalDocument
      - contractDocument
      - avenantDocument
      - sinistreDocument
      - declarationSinistreDocument
      - temporaireDocument
      - errors
